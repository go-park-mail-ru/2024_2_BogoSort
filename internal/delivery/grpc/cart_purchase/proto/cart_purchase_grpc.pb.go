// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.0
// source: internal/delivery/grpc/cart_purchase/proto/cart_purchase.proto

package cart_purchase

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	CartPurchaseService_AddPurchase_FullMethodName          = "/cart_purchase.CartPurchaseService/AddPurchase"
	CartPurchaseService_GetPurchasesByUserID_FullMethodName = "/cart_purchase.CartPurchaseService/GetPurchasesByUserID"
	CartPurchaseService_GetCartByID_FullMethodName          = "/cart_purchase.CartPurchaseService/GetCartByID"
	CartPurchaseService_GetCartByUserID_FullMethodName      = "/cart_purchase.CartPurchaseService/GetCartByUserID"
	CartPurchaseService_AddAdvertToCart_FullMethodName      = "/cart_purchase.CartPurchaseService/AddAdvertToCart"
	CartPurchaseService_DeleteAdvertFromCart_FullMethodName = "/cart_purchase.CartPurchaseService/DeleteAdvertFromCart"
	CartPurchaseService_CheckCartExists_FullMethodName      = "/cart_purchase.CartPurchaseService/CheckCartExists"
	CartPurchaseService_Ping_FullMethodName                 = "/cart_purchase.CartPurchaseService/Ping"
)

// CartPurchaseServiceClient is the client API for CartPurchaseService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CartPurchaseServiceClient interface {
	AddPurchase(ctx context.Context, in *AddPurchaseRequest, opts ...grpc.CallOption) (*AddPurchaseResponse, error)
	GetPurchasesByUserID(ctx context.Context, in *GetPurchasesByUserIDRequest, opts ...grpc.CallOption) (*GetPurchasesByUserIDResponse, error)
	GetCartByID(ctx context.Context, in *GetCartByIDRequest, opts ...grpc.CallOption) (*GetCartByIDResponse, error)
	GetCartByUserID(ctx context.Context, in *GetCartByUserIDRequest, opts ...grpc.CallOption) (*GetCartByUserIDResponse, error)
	AddAdvertToCart(ctx context.Context, in *AddAdvertToCartRequest, opts ...grpc.CallOption) (*AddAdvertToCartResponse, error)
	DeleteAdvertFromCart(ctx context.Context, in *DeleteAdvertFromCartRequest, opts ...grpc.CallOption) (*DeleteAdvertFromCartResponse, error)
	CheckCartExists(ctx context.Context, in *CheckCartExistsRequest, opts ...grpc.CallOption) (*CheckCartExistsResponse, error)
	Ping(ctx context.Context, in *NoContent, opts ...grpc.CallOption) (*NoContent, error)
}

type cartPurchaseServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCartPurchaseServiceClient(cc grpc.ClientConnInterface) CartPurchaseServiceClient {
	return &cartPurchaseServiceClient{cc}
}

func (c *cartPurchaseServiceClient) AddPurchase(ctx context.Context, in *AddPurchaseRequest, opts ...grpc.CallOption) (*AddPurchaseResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddPurchaseResponse)
	err := c.cc.Invoke(ctx, CartPurchaseService_AddPurchase_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cartPurchaseServiceClient) GetPurchasesByUserID(ctx context.Context, in *GetPurchasesByUserIDRequest, opts ...grpc.CallOption) (*GetPurchasesByUserIDResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetPurchasesByUserIDResponse)
	err := c.cc.Invoke(ctx, CartPurchaseService_GetPurchasesByUserID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cartPurchaseServiceClient) GetCartByID(ctx context.Context, in *GetCartByIDRequest, opts ...grpc.CallOption) (*GetCartByIDResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetCartByIDResponse)
	err := c.cc.Invoke(ctx, CartPurchaseService_GetCartByID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cartPurchaseServiceClient) GetCartByUserID(ctx context.Context, in *GetCartByUserIDRequest, opts ...grpc.CallOption) (*GetCartByUserIDResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetCartByUserIDResponse)
	err := c.cc.Invoke(ctx, CartPurchaseService_GetCartByUserID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cartPurchaseServiceClient) AddAdvertToCart(ctx context.Context, in *AddAdvertToCartRequest, opts ...grpc.CallOption) (*AddAdvertToCartResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddAdvertToCartResponse)
	err := c.cc.Invoke(ctx, CartPurchaseService_AddAdvertToCart_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cartPurchaseServiceClient) DeleteAdvertFromCart(ctx context.Context, in *DeleteAdvertFromCartRequest, opts ...grpc.CallOption) (*DeleteAdvertFromCartResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteAdvertFromCartResponse)
	err := c.cc.Invoke(ctx, CartPurchaseService_DeleteAdvertFromCart_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cartPurchaseServiceClient) CheckCartExists(ctx context.Context, in *CheckCartExistsRequest, opts ...grpc.CallOption) (*CheckCartExistsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CheckCartExistsResponse)
	err := c.cc.Invoke(ctx, CartPurchaseService_CheckCartExists_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cartPurchaseServiceClient) Ping(ctx context.Context, in *NoContent, opts ...grpc.CallOption) (*NoContent, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(NoContent)
	err := c.cc.Invoke(ctx, CartPurchaseService_Ping_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CartPurchaseServiceServer is the server API for CartPurchaseService service.
// All implementations must embed UnimplementedCartPurchaseServiceServer
// for forward compatibility.
type CartPurchaseServiceServer interface {
	AddPurchase(context.Context, *AddPurchaseRequest) (*AddPurchaseResponse, error)
	GetPurchasesByUserID(context.Context, *GetPurchasesByUserIDRequest) (*GetPurchasesByUserIDResponse, error)
	GetCartByID(context.Context, *GetCartByIDRequest) (*GetCartByIDResponse, error)
	GetCartByUserID(context.Context, *GetCartByUserIDRequest) (*GetCartByUserIDResponse, error)
	AddAdvertToCart(context.Context, *AddAdvertToCartRequest) (*AddAdvertToCartResponse, error)
	DeleteAdvertFromCart(context.Context, *DeleteAdvertFromCartRequest) (*DeleteAdvertFromCartResponse, error)
	CheckCartExists(context.Context, *CheckCartExistsRequest) (*CheckCartExistsResponse, error)
	Ping(context.Context, *NoContent) (*NoContent, error)
	mustEmbedUnimplementedCartPurchaseServiceServer()
}

// UnimplementedCartPurchaseServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedCartPurchaseServiceServer struct{}

func (UnimplementedCartPurchaseServiceServer) AddPurchase(context.Context, *AddPurchaseRequest) (*AddPurchaseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddPurchase not implemented")
}
func (UnimplementedCartPurchaseServiceServer) GetPurchasesByUserID(context.Context, *GetPurchasesByUserIDRequest) (*GetPurchasesByUserIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPurchasesByUserID not implemented")
}
func (UnimplementedCartPurchaseServiceServer) GetCartByID(context.Context, *GetCartByIDRequest) (*GetCartByIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCartByID not implemented")
}
func (UnimplementedCartPurchaseServiceServer) GetCartByUserID(context.Context, *GetCartByUserIDRequest) (*GetCartByUserIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCartByUserID not implemented")
}
func (UnimplementedCartPurchaseServiceServer) AddAdvertToCart(context.Context, *AddAdvertToCartRequest) (*AddAdvertToCartResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddAdvertToCart not implemented")
}
func (UnimplementedCartPurchaseServiceServer) DeleteAdvertFromCart(context.Context, *DeleteAdvertFromCartRequest) (*DeleteAdvertFromCartResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAdvertFromCart not implemented")
}
func (UnimplementedCartPurchaseServiceServer) CheckCartExists(context.Context, *CheckCartExistsRequest) (*CheckCartExistsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckCartExists not implemented")
}
func (UnimplementedCartPurchaseServiceServer) Ping(context.Context, *NoContent) (*NoContent, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (UnimplementedCartPurchaseServiceServer) mustEmbedUnimplementedCartPurchaseServiceServer() {}
func (UnimplementedCartPurchaseServiceServer) testEmbeddedByValue()                             {}

// UnsafeCartPurchaseServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CartPurchaseServiceServer will
// result in compilation errors.
type UnsafeCartPurchaseServiceServer interface {
	mustEmbedUnimplementedCartPurchaseServiceServer()
}

func RegisterCartPurchaseServiceServer(s grpc.ServiceRegistrar, srv CartPurchaseServiceServer) {
	// If the following call pancis, it indicates UnimplementedCartPurchaseServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&CartPurchaseService_ServiceDesc, srv)
}

func _CartPurchaseService_AddPurchase_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddPurchaseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CartPurchaseServiceServer).AddPurchase(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CartPurchaseService_AddPurchase_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CartPurchaseServiceServer).AddPurchase(ctx, req.(*AddPurchaseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CartPurchaseService_GetPurchasesByUserID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPurchasesByUserIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CartPurchaseServiceServer).GetPurchasesByUserID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CartPurchaseService_GetPurchasesByUserID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CartPurchaseServiceServer).GetPurchasesByUserID(ctx, req.(*GetPurchasesByUserIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CartPurchaseService_GetCartByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCartByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CartPurchaseServiceServer).GetCartByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CartPurchaseService_GetCartByID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CartPurchaseServiceServer).GetCartByID(ctx, req.(*GetCartByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CartPurchaseService_GetCartByUserID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCartByUserIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CartPurchaseServiceServer).GetCartByUserID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CartPurchaseService_GetCartByUserID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CartPurchaseServiceServer).GetCartByUserID(ctx, req.(*GetCartByUserIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CartPurchaseService_AddAdvertToCart_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddAdvertToCartRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CartPurchaseServiceServer).AddAdvertToCart(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CartPurchaseService_AddAdvertToCart_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CartPurchaseServiceServer).AddAdvertToCart(ctx, req.(*AddAdvertToCartRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CartPurchaseService_DeleteAdvertFromCart_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAdvertFromCartRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CartPurchaseServiceServer).DeleteAdvertFromCart(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CartPurchaseService_DeleteAdvertFromCart_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CartPurchaseServiceServer).DeleteAdvertFromCart(ctx, req.(*DeleteAdvertFromCartRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CartPurchaseService_CheckCartExists_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckCartExistsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CartPurchaseServiceServer).CheckCartExists(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CartPurchaseService_CheckCartExists_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CartPurchaseServiceServer).CheckCartExists(ctx, req.(*CheckCartExistsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CartPurchaseService_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NoContent)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CartPurchaseServiceServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CartPurchaseService_Ping_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CartPurchaseServiceServer).Ping(ctx, req.(*NoContent))
	}
	return interceptor(ctx, in, info, handler)
}

// CartPurchaseService_ServiceDesc is the grpc.ServiceDesc for CartPurchaseService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CartPurchaseService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "cart_purchase.CartPurchaseService",
	HandlerType: (*CartPurchaseServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddPurchase",
			Handler:    _CartPurchaseService_AddPurchase_Handler,
		},
		{
			MethodName: "GetPurchasesByUserID",
			Handler:    _CartPurchaseService_GetPurchasesByUserID_Handler,
		},
		{
			MethodName: "GetCartByID",
			Handler:    _CartPurchaseService_GetCartByID_Handler,
		},
		{
			MethodName: "GetCartByUserID",
			Handler:    _CartPurchaseService_GetCartByUserID_Handler,
		},
		{
			MethodName: "AddAdvertToCart",
			Handler:    _CartPurchaseService_AddAdvertToCart_Handler,
		},
		{
			MethodName: "DeleteAdvertFromCart",
			Handler:    _CartPurchaseService_DeleteAdvertFromCart_Handler,
		},
		{
			MethodName: "CheckCartExists",
			Handler:    _CartPurchaseService_CheckCartExists_Handler,
		},
		{
			MethodName: "Ping",
			Handler:    _CartPurchaseService_Ping_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "internal/delivery/grpc/cart_purchase/proto/cart_purchase.proto",
}
