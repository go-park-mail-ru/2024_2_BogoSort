// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.28.3
// source: static.proto

package static

import (
	context "context"

	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	StaticService_GetStatic_FullMethodName     = "/static.StaticService/GetStatic"
	StaticService_UploadStatic_FullMethodName  = "/static.StaticService/UploadStatic"
	StaticService_GetStaticFile_FullMethodName = "/static.StaticService/GetStaticFile"
	StaticService_Ping_FullMethodName          = "/static.StaticService/Ping"
)

// StaticServiceClient is the client API for StaticService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StaticServiceClient interface {
	GetStatic(ctx context.Context, in *Static, opts ...grpc.CallOption) (*Static, error)
	UploadStatic(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[StaticUpload, Static], error)
	GetStaticFile(ctx context.Context, in *Static, opts ...grpc.CallOption) (grpc.ServerStreamingClient[StaticUpload], error)
	Ping(ctx context.Context, in *Nothing, opts ...grpc.CallOption) (*Nothing, error)
}

type staticServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewStaticServiceClient(cc grpc.ClientConnInterface) StaticServiceClient {
	return &staticServiceClient{cc}
}

func (c *staticServiceClient) GetStatic(ctx context.Context, in *Static, opts ...grpc.CallOption) (*Static, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Static)
	err := c.cc.Invoke(ctx, StaticService_GetStatic_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *staticServiceClient) UploadStatic(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[StaticUpload, Static], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &StaticService_ServiceDesc.Streams[0], StaticService_UploadStatic_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[StaticUpload, Static]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type StaticService_UploadStaticClient = grpc.ClientStreamingClient[StaticUpload, Static]

func (c *staticServiceClient) GetStaticFile(ctx context.Context, in *Static, opts ...grpc.CallOption) (grpc.ServerStreamingClient[StaticUpload], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &StaticService_ServiceDesc.Streams[1], StaticService_GetStaticFile_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[Static, StaticUpload]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type StaticService_GetStaticFileClient = grpc.ServerStreamingClient[StaticUpload]

func (c *staticServiceClient) Ping(ctx context.Context, in *Nothing, opts ...grpc.CallOption) (*Nothing, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Nothing)
	err := c.cc.Invoke(ctx, StaticService_Ping_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// StaticServiceServer is the server API for StaticService service.
// All implementations must embed UnimplementedStaticServiceServer
// for forward compatibility.
type StaticServiceServer interface {
	GetStatic(context.Context, *Static) (*Static, error)
	UploadStatic(grpc.ClientStreamingServer[StaticUpload, Static]) error
	GetStaticFile(*Static, grpc.ServerStreamingServer[StaticUpload]) error
	Ping(context.Context, *Nothing) (*Nothing, error)
	mustEmbedUnimplementedStaticServiceServer()
}

// UnimplementedStaticServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedStaticServiceServer struct{}

func (UnimplementedStaticServiceServer) GetStatic(context.Context, *Static) (*Static, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStatic not implemented")
}
func (UnimplementedStaticServiceServer) UploadStatic(grpc.ClientStreamingServer[StaticUpload, Static]) error {
	return status.Errorf(codes.Unimplemented, "method UploadStatic not implemented")
}
func (UnimplementedStaticServiceServer) GetStaticFile(*Static, grpc.ServerStreamingServer[StaticUpload]) error {
	return status.Errorf(codes.Unimplemented, "method GetStaticFile not implemented")
}
func (UnimplementedStaticServiceServer) Ping(context.Context, *Nothing) (*Nothing, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (UnimplementedStaticServiceServer) mustEmbedUnimplementedStaticServiceServer() {}
func (UnimplementedStaticServiceServer) testEmbeddedByValue()                       {}

// UnsafeStaticServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StaticServiceServer will
// result in compilation errors.
type UnsafeStaticServiceServer interface {
	mustEmbedUnimplementedStaticServiceServer()
}

func RegisterStaticServiceServer(s grpc.ServiceRegistrar, srv StaticServiceServer) {
	// If the following call pancis, it indicates UnimplementedStaticServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&StaticService_ServiceDesc, srv)
}

func _StaticService_GetStatic_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Static)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StaticServiceServer).GetStatic(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StaticService_GetStatic_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StaticServiceServer).GetStatic(ctx, req.(*Static))
	}
	return interceptor(ctx, in, info, handler)
}

func _StaticService_UploadStatic_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(StaticServiceServer).UploadStatic(&grpc.GenericServerStream[StaticUpload, Static]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type StaticService_UploadStaticServer = grpc.ClientStreamingServer[StaticUpload, Static]

func _StaticService_GetStaticFile_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Static)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(StaticServiceServer).GetStaticFile(m, &grpc.GenericServerStream[Static, StaticUpload]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type StaticService_GetStaticFileServer = grpc.ServerStreamingServer[StaticUpload]

func _StaticService_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Nothing)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StaticServiceServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StaticService_Ping_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StaticServiceServer).Ping(ctx, req.(*Nothing))
	}
	return interceptor(ctx, in, info, handler)
}

// StaticService_ServiceDesc is the grpc.ServiceDesc for StaticService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var StaticService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "static.StaticService",
	HandlerType: (*StaticServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetStatic",
			Handler:    _StaticService_GetStatic_Handler,
		},
		{
			MethodName: "Ping",
			Handler:    _StaticService_Ping_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "UploadStatic",
			Handler:       _StaticService_UploadStatic_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "GetStaticFile",
			Handler:       _StaticService_GetStaticFile_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "static.proto",
}
