// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.28.3
// source: survey.proto

package survey

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	SurveyService_AddAnswer_FullMethodName    = "/survey.SurveyService/AddAnswer"
	SurveyService_GetQuestions_FullMethodName = "/survey.SurveyService/GetQuestions"
	SurveyService_Ping_FullMethodName         = "/survey.SurveyService/Ping"
)

// SurveyServiceClient is the client API for SurveyService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SurveyServiceClient interface {
	AddAnswer(ctx context.Context, in *AddAnswerRequest, opts ...grpc.CallOption) (*AddAnswerResponse, error)
	GetQuestions(ctx context.Context, in *GetQuestionsRequest, opts ...grpc.CallOption) (*GetQuestionsResponse, error)
	Ping(ctx context.Context, in *NoContent, opts ...grpc.CallOption) (*NoContent, error)
}

type surveyServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSurveyServiceClient(cc grpc.ClientConnInterface) SurveyServiceClient {
	return &surveyServiceClient{cc}
}

func (c *surveyServiceClient) AddAnswer(ctx context.Context, in *AddAnswerRequest, opts ...grpc.CallOption) (*AddAnswerResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddAnswerResponse)
	err := c.cc.Invoke(ctx, SurveyService_AddAnswer_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *surveyServiceClient) GetQuestions(ctx context.Context, in *GetQuestionsRequest, opts ...grpc.CallOption) (*GetQuestionsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetQuestionsResponse)
	err := c.cc.Invoke(ctx, SurveyService_GetQuestions_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *surveyServiceClient) Ping(ctx context.Context, in *NoContent, opts ...grpc.CallOption) (*NoContent, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(NoContent)
	err := c.cc.Invoke(ctx, SurveyService_Ping_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SurveyServiceServer is the server API for SurveyService service.
// All implementations must embed UnimplementedSurveyServiceServer
// for forward compatibility.
type SurveyServiceServer interface {
	AddAnswer(context.Context, *AddAnswerRequest) (*AddAnswerResponse, error)
	GetQuestions(context.Context, *GetQuestionsRequest) (*GetQuestionsResponse, error)
	Ping(context.Context, *NoContent) (*NoContent, error)
	mustEmbedUnimplementedSurveyServiceServer()
}

// UnimplementedSurveyServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedSurveyServiceServer struct{}

func (UnimplementedSurveyServiceServer) AddAnswer(context.Context, *AddAnswerRequest) (*AddAnswerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddAnswer not implemented")
}
func (UnimplementedSurveyServiceServer) GetQuestions(context.Context, *GetQuestionsRequest) (*GetQuestionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetQuestions not implemented")
}
func (UnimplementedSurveyServiceServer) Ping(context.Context, *NoContent) (*NoContent, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (UnimplementedSurveyServiceServer) mustEmbedUnimplementedSurveyServiceServer() {}
func (UnimplementedSurveyServiceServer) testEmbeddedByValue()                       {}

// UnsafeSurveyServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SurveyServiceServer will
// result in compilation errors.
type UnsafeSurveyServiceServer interface {
	mustEmbedUnimplementedSurveyServiceServer()
}

func RegisterSurveyServiceServer(s grpc.ServiceRegistrar, srv SurveyServiceServer) {
	// If the following call pancis, it indicates UnimplementedSurveyServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&SurveyService_ServiceDesc, srv)
}

func _SurveyService_AddAnswer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddAnswerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SurveyServiceServer).AddAnswer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SurveyService_AddAnswer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SurveyServiceServer).AddAnswer(ctx, req.(*AddAnswerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SurveyService_GetQuestions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetQuestionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SurveyServiceServer).GetQuestions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SurveyService_GetQuestions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SurveyServiceServer).GetQuestions(ctx, req.(*GetQuestionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SurveyService_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NoContent)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SurveyServiceServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SurveyService_Ping_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SurveyServiceServer).Ping(ctx, req.(*NoContent))
	}
	return interceptor(ctx, in, info, handler)
}

// SurveyService_ServiceDesc is the grpc.ServiceDesc for SurveyService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SurveyService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "survey.SurveyService",
	HandlerType: (*SurveyServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddAnswer",
			Handler:    _SurveyService_AddAnswer_Handler,
		},
		{
			MethodName: "GetQuestions",
			Handler:    _SurveyService_GetQuestions_Handler,
		},
		{
			MethodName: "Ping",
			Handler:    _SurveyService_Ping_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "survey.proto",
}
