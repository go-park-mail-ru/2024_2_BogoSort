// Code generated by MockGen. DO NOT EDIT.
// Source: internal/usecase/cart.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	dto "github.com/go-park-mail-ru/2024_2_BogoSort/internal/entity/dto"
	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
)

// MockCart is a mock of Cart interface.
type MockCart struct {
	ctrl     *gomock.Controller
	recorder *MockCartMockRecorder
}

// MockCartMockRecorder is the mock recorder for MockCart.
type MockCartMockRecorder struct {
	mock *MockCart
}

// NewMockCart creates a new mock instance.
func NewMockCart(ctrl *gomock.Controller) *MockCart {
	mock := &MockCart{ctrl: ctrl}
	mock.recorder = &MockCartMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCart) EXPECT() *MockCartMockRecorder {
	return m.recorder
}

// AddAdvertToUserCart mocks base method.
func (m *MockCart) AddAdvertToUserCart(userID, AdvertID uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddAdvertToUserCart", userID, AdvertID)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddAdvertToUserCart indicates an expected call of AddAdvertToUserCart.
func (mr *MockCartMockRecorder) AddAdvertToUserCart(userID, AdvertID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddAdvertToUserCart", reflect.TypeOf((*MockCart)(nil).AddAdvertToUserCart), userID, AdvertID)
}

// CheckCartExists mocks base method.
func (m *MockCart) CheckCartExists(userID uuid.UUID) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckCartExists", userID)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckCartExists indicates an expected call of CheckCartExists.
func (mr *MockCartMockRecorder) CheckCartExists(userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckCartExists", reflect.TypeOf((*MockCart)(nil).CheckCartExists), userID)
}

// DeleteAdvertFromCart mocks base method.
func (m *MockCart) DeleteAdvertFromCart(cartID, AdvertID uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAdvertFromCart", cartID, AdvertID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAdvertFromCart indicates an expected call of DeleteAdvertFromCart.
func (mr *MockCartMockRecorder) DeleteAdvertFromCart(cartID, AdvertID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAdvertFromCart", reflect.TypeOf((*MockCart)(nil).DeleteAdvertFromCart), cartID, AdvertID)
}

// GetCartByID mocks base method.
func (m *MockCart) GetCartByID(cartID uuid.UUID) (dto.Cart, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCartByID", cartID)
	ret0, _ := ret[0].(dto.Cart)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCartByID indicates an expected call of GetCartByID.
func (mr *MockCartMockRecorder) GetCartByID(cartID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCartByID", reflect.TypeOf((*MockCart)(nil).GetCartByID), cartID)
}

// GetCartByUserID mocks base method.
func (m *MockCart) GetCartByUserID(userID uuid.UUID) (dto.Cart, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCartByUserID", userID)
	ret0, _ := ret[0].(dto.Cart)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCartByUserID indicates an expected call of GetCartByUserID.
func (mr *MockCartMockRecorder) GetCartByUserID(userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCartByUserID", reflect.TypeOf((*MockCart)(nil).GetCartByUserID), userID)
}
