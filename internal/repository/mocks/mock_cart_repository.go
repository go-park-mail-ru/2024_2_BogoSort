// Code generated by MockGen. DO NOT EDIT.
// Source: internal/repository/cart.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	entity "github.com/go-park-mail-ru/2024_2_BogoSort/internal/entity"
	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
	pgx "github.com/jackc/pgx/v5"
)

// MockCart is a mock of Cart interface.
type MockCart struct {
	ctrl     *gomock.Controller
	recorder *MockCartMockRecorder
}

// MockCartMockRecorder is the mock recorder for MockCart.
type MockCartMockRecorder struct {
	mock *MockCart
}

// NewMockCart creates a new mock instance.
func NewMockCart(ctrl *gomock.Controller) *MockCart {
	mock := &MockCart{ctrl: ctrl}
	mock.recorder = &MockCartMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCart) EXPECT() *MockCartMockRecorder {
	return m.recorder
}

// AddAdvert mocks base method.
func (m *MockCart) AddAdvert(cartID, AdvertID uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddAdvert", cartID, AdvertID)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddAdvert indicates an expected call of AddAdvert.
func (mr *MockCartMockRecorder) AddAdvert(cartID, AdvertID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddAdvert", reflect.TypeOf((*MockCart)(nil).AddAdvert), cartID, AdvertID)
}

// Create mocks base method.
func (m *MockCart) Create(userID uuid.UUID) (uuid.UUID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", userID)
	ret0, _ := ret[0].(uuid.UUID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockCartMockRecorder) Create(userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockCart)(nil).Create), userID)
}

// DeleteAdvert mocks base method.
func (m *MockCart) DeleteAdvert(cartID, AdvertID uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAdvert", cartID, AdvertID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAdvert indicates an expected call of DeleteAdvert.
func (mr *MockCartMockRecorder) DeleteAdvert(cartID, AdvertID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAdvert", reflect.TypeOf((*MockCart)(nil).DeleteAdvert), cartID, AdvertID)
}

// GetAdvertsByCartId mocks base method.
func (m *MockCart) GetAdvertsByCartId(cartID uuid.UUID) ([]entity.Advert, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAdvertsByCartId", cartID)
	ret0, _ := ret[0].([]entity.Advert)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAdvertsByCartId indicates an expected call of GetAdvertsByCartId.
func (mr *MockCartMockRecorder) GetAdvertsByCartId(cartID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAdvertsByCartId", reflect.TypeOf((*MockCart)(nil).GetAdvertsByCartId), cartID)
}

// GetById mocks base method.
func (m *MockCart) GetById(cartID uuid.UUID) (entity.Cart, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetById", cartID)
	ret0, _ := ret[0].(entity.Cart)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetById indicates an expected call of GetById.
func (mr *MockCartMockRecorder) GetById(cartID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetById", reflect.TypeOf((*MockCart)(nil).GetById), cartID)
}

// GetByUserId mocks base method.
func (m *MockCart) GetByUserId(userID uuid.UUID) (entity.Cart, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByUserId", userID)
	ret0, _ := ret[0].(entity.Cart)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByUserId indicates an expected call of GetByUserId.
func (mr *MockCartMockRecorder) GetByUserId(userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByUserId", reflect.TypeOf((*MockCart)(nil).GetByUserId), userID)
}

// UpdateStatus mocks base method.
func (m *MockCart) UpdateStatus(tx pgx.Tx, cartID uuid.UUID, status entity.CartStatus) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateStatus", tx, cartID, status)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateStatus indicates an expected call of UpdateStatus.
func (mr *MockCartMockRecorder) UpdateStatus(tx, cartID, status interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateStatus", reflect.TypeOf((*MockCart)(nil).UpdateStatus), tx, cartID, status)
}
