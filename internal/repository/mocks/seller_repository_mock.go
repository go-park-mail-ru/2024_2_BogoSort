// Code generated by MockGen. DO NOT EDIT.
// Source: internal/repository/seller.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	entity "github.com/go-park-mail-ru/2024_2_BogoSort/internal/entity"
	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
	pgx "github.com/jackc/pgx/v5"
)

// MockSeller is a mock of Seller interface.
type MockSeller struct {
	ctrl     *gomock.Controller
	recorder *MockSellerMockRecorder
}

// MockSellerMockRecorder is the mock recorder for MockSeller.
type MockSellerMockRecorder struct {
	mock *MockSeller
}

// NewMockSeller creates a new mock instance.
func NewMockSeller(ctrl *gomock.Controller) *MockSeller {
	mock := &MockSeller{ctrl: ctrl}
	mock.recorder = &MockSellerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSeller) EXPECT() *MockSellerMockRecorder {
	return m.recorder
}

// AddSeller mocks base method.
func (m *MockSeller) AddSeller(tx pgx.Tx, userID uuid.UUID) (uuid.UUID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddSeller", tx, userID)
	ret0, _ := ret[0].(uuid.UUID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddSeller indicates an expected call of AddSeller.
func (mr *MockSellerMockRecorder) AddSeller(tx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddSeller", reflect.TypeOf((*MockSeller)(nil).AddSeller), tx, userID)
}

// GetSellerByID mocks base method.
func (m *MockSeller) GetSellerByID(sellerID uuid.UUID) (*entity.Seller, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSellerByID", sellerID)
	ret0, _ := ret[0].(*entity.Seller)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSellerByID indicates an expected call of GetSellerByID.
func (mr *MockSellerMockRecorder) GetSellerByID(sellerID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSellerByID", reflect.TypeOf((*MockSeller)(nil).GetSellerByID), sellerID)
}

// GetSellerByUserID mocks base method.
func (m *MockSeller) GetSellerByUserID(userID uuid.UUID) (*entity.Seller, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSellerByUserID", userID)
	ret0, _ := ret[0].(*entity.Seller)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSellerByUserID indicates an expected call of GetSellerByUserID.
func (mr *MockSellerMockRecorder) GetSellerByUserID(userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSellerByUserID", reflect.TypeOf((*MockSeller)(nil).GetSellerByUserID), userID)
}
