// Code generated by MockGen. DO NOT EDIT.
// Source: internal/repository/purchase.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	entity "github.com/go-park-mail-ru/2024_2_BogoSort/internal/entity"
	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
	pgx "github.com/jackc/pgx/v5"
)

// MockPurchaseRepository is a mock of PurchaseRepository interface.
type MockPurchaseRepository struct {
	ctrl     *gomock.Controller
	recorder *MockPurchaseRepositoryMockRecorder
}

// MockPurchaseRepositoryMockRecorder is the mock recorder for MockPurchaseRepository.
type MockPurchaseRepositoryMockRecorder struct {
	mock *MockPurchaseRepository
}

// NewMockPurchaseRepository creates a new mock instance.
func NewMockPurchaseRepository(ctrl *gomock.Controller) *MockPurchaseRepository {
	mock := &MockPurchaseRepository{ctrl: ctrl}
	mock.recorder = &MockPurchaseRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPurchaseRepository) EXPECT() *MockPurchaseRepositoryMockRecorder {
	return m.recorder
}

// Add mocks base method.
func (m *MockPurchaseRepository) Add(tx pgx.Tx, purchase *entity.Purchase) (*entity.Purchase, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Add", tx, purchase)
	ret0, _ := ret[0].(*entity.Purchase)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Add indicates an expected call of Add.
func (mr *MockPurchaseRepositoryMockRecorder) Add(tx, purchase interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*MockPurchaseRepository)(nil).Add), tx, purchase)
}

// BeginTransaction mocks base method.
func (m *MockPurchaseRepository) BeginTransaction() (pgx.Tx, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BeginTransaction")
	ret0, _ := ret[0].(pgx.Tx)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BeginTransaction indicates an expected call of BeginTransaction.
func (mr *MockPurchaseRepositoryMockRecorder) BeginTransaction() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BeginTransaction", reflect.TypeOf((*MockPurchaseRepository)(nil).BeginTransaction))
}

// GetByUserId mocks base method.
func (m *MockPurchaseRepository) GetByUserId(userID uuid.UUID) ([]*entity.Purchase, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByUserId", userID)
	ret0, _ := ret[0].([]*entity.Purchase)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByUserId indicates an expected call of GetByUserId.
func (mr *MockPurchaseRepositoryMockRecorder) GetByUserId(userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByUserId", reflect.TypeOf((*MockPurchaseRepository)(nil).GetByUserId), userID)
}
