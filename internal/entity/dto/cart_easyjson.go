// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package dto

import (
	json "encoding/json"
	entity "github.com/go-park-mail-ru/2024_2_BogoSort/internal/entity"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjsonDdb0949aDecodeGithubComGoParkMailRu20242BogoSortInternalEntityDto(in *jlexer.Lexer, out *DeleteAdvertFromUserCartRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "cart_id":
			if data := in.UnsafeBytes(); in.Ok() {
				in.AddError((out.CartID).UnmarshalText(data))
			}
		case "advert_id":
			if data := in.UnsafeBytes(); in.Ok() {
				in.AddError((out.AdvertID).UnmarshalText(data))
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonDdb0949aEncodeGithubComGoParkMailRu20242BogoSortInternalEntityDto(out *jwriter.Writer, in DeleteAdvertFromUserCartRequest) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"cart_id\":"
		out.RawString(prefix[1:])
		out.RawText((in.CartID).MarshalText())
	}
	{
		const prefix string = ",\"advert_id\":"
		out.RawString(prefix)
		out.RawText((in.AdvertID).MarshalText())
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v DeleteAdvertFromUserCartRequest) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonDdb0949aEncodeGithubComGoParkMailRu20242BogoSortInternalEntityDto(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v DeleteAdvertFromUserCartRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonDdb0949aEncodeGithubComGoParkMailRu20242BogoSortInternalEntityDto(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *DeleteAdvertFromUserCartRequest) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonDdb0949aDecodeGithubComGoParkMailRu20242BogoSortInternalEntityDto(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *DeleteAdvertFromUserCartRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonDdb0949aDecodeGithubComGoParkMailRu20242BogoSortInternalEntityDto(l, v)
}
func easyjsonDdb0949aDecodeGithubComGoParkMailRu20242BogoSortInternalEntityDto1(in *jlexer.Lexer, out *CartResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "cart":
			(out.Cart).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonDdb0949aEncodeGithubComGoParkMailRu20242BogoSortInternalEntityDto1(out *jwriter.Writer, in CartResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"cart\":"
		out.RawString(prefix[1:])
		(in.Cart).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v CartResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonDdb0949aEncodeGithubComGoParkMailRu20242BogoSortInternalEntityDto1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v CartResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonDdb0949aEncodeGithubComGoParkMailRu20242BogoSortInternalEntityDto1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *CartResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonDdb0949aDecodeGithubComGoParkMailRu20242BogoSortInternalEntityDto1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *CartResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonDdb0949aDecodeGithubComGoParkMailRu20242BogoSortInternalEntityDto1(l, v)
}
func easyjsonDdb0949aDecodeGithubComGoParkMailRu20242BogoSortInternalEntityDto2(in *jlexer.Lexer, out *CartPurchase) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "seller_id":
			if data := in.UnsafeBytes(); in.Ok() {
				in.AddError((out.SellerID).UnmarshalText(data))
			}
		case "adverts":
			if in.IsNull() {
				in.Skip()
				out.Adverts = nil
			} else {
				in.Delim('[')
				if out.Adverts == nil {
					if !in.IsDelim(']') {
						out.Adverts = make([]PreviewAdvertCard, 0, 0)
					} else {
						out.Adverts = []PreviewAdvertCard{}
					}
				} else {
					out.Adverts = (out.Adverts)[:0]
				}
				for !in.IsDelim(']') {
					var v1 PreviewAdvertCard
					(v1).UnmarshalEasyJSON(in)
					out.Adverts = append(out.Adverts, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonDdb0949aEncodeGithubComGoParkMailRu20242BogoSortInternalEntityDto2(out *jwriter.Writer, in CartPurchase) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"seller_id\":"
		out.RawString(prefix[1:])
		out.RawText((in.SellerID).MarshalText())
	}
	{
		const prefix string = ",\"adverts\":"
		out.RawString(prefix)
		if in.Adverts == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v2, v3 := range in.Adverts {
				if v2 > 0 {
					out.RawByte(',')
				}
				(v3).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v CartPurchase) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonDdb0949aEncodeGithubComGoParkMailRu20242BogoSortInternalEntityDto2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v CartPurchase) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonDdb0949aEncodeGithubComGoParkMailRu20242BogoSortInternalEntityDto2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *CartPurchase) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonDdb0949aDecodeGithubComGoParkMailRu20242BogoSortInternalEntityDto2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *CartPurchase) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonDdb0949aDecodeGithubComGoParkMailRu20242BogoSortInternalEntityDto2(l, v)
}
func easyjsonDdb0949aDecodeGithubComGoParkMailRu20242BogoSortInternalEntityDto3(in *jlexer.Lexer, out *Cart) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			if data := in.UnsafeBytes(); in.Ok() {
				in.AddError((out.ID).UnmarshalText(data))
			}
		case "user_id":
			if data := in.UnsafeBytes(); in.Ok() {
				in.AddError((out.UserID).UnmarshalText(data))
			}
		case "cart_purchases":
			if in.IsNull() {
				in.Skip()
				out.CartPurchases = nil
			} else {
				in.Delim('[')
				if out.CartPurchases == nil {
					if !in.IsDelim(']') {
						out.CartPurchases = make([]CartPurchase, 0, 1)
					} else {
						out.CartPurchases = []CartPurchase{}
					}
				} else {
					out.CartPurchases = (out.CartPurchases)[:0]
				}
				for !in.IsDelim(']') {
					var v4 CartPurchase
					(v4).UnmarshalEasyJSON(in)
					out.CartPurchases = append(out.CartPurchases, v4)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "status":
			out.Status = entity.CartStatus(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonDdb0949aEncodeGithubComGoParkMailRu20242BogoSortInternalEntityDto3(out *jwriter.Writer, in Cart) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.RawText((in.ID).MarshalText())
	}
	{
		const prefix string = ",\"user_id\":"
		out.RawString(prefix)
		out.RawText((in.UserID).MarshalText())
	}
	{
		const prefix string = ",\"cart_purchases\":"
		out.RawString(prefix)
		if in.CartPurchases == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v5, v6 := range in.CartPurchases {
				if v5 > 0 {
					out.RawByte(',')
				}
				(v6).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"status\":"
		out.RawString(prefix)
		out.String(string(in.Status))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Cart) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonDdb0949aEncodeGithubComGoParkMailRu20242BogoSortInternalEntityDto3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Cart) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonDdb0949aEncodeGithubComGoParkMailRu20242BogoSortInternalEntityDto3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Cart) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonDdb0949aDecodeGithubComGoParkMailRu20242BogoSortInternalEntityDto3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Cart) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonDdb0949aDecodeGithubComGoParkMailRu20242BogoSortInternalEntityDto3(l, v)
}
func easyjsonDdb0949aDecodeGithubComGoParkMailRu20242BogoSortInternalEntityDto4(in *jlexer.Lexer, out *AddAdvertToUserCartRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "user_id":
			if data := in.UnsafeBytes(); in.Ok() {
				in.AddError((out.UserID).UnmarshalText(data))
			}
		case "advert_id":
			if data := in.UnsafeBytes(); in.Ok() {
				in.AddError((out.AdvertID).UnmarshalText(data))
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonDdb0949aEncodeGithubComGoParkMailRu20242BogoSortInternalEntityDto4(out *jwriter.Writer, in AddAdvertToUserCartRequest) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"user_id\":"
		out.RawString(prefix[1:])
		out.RawText((in.UserID).MarshalText())
	}
	{
		const prefix string = ",\"advert_id\":"
		out.RawString(prefix)
		out.RawText((in.AdvertID).MarshalText())
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v AddAdvertToUserCartRequest) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonDdb0949aEncodeGithubComGoParkMailRu20242BogoSortInternalEntityDto4(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v AddAdvertToUserCartRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonDdb0949aEncodeGithubComGoParkMailRu20242BogoSortInternalEntityDto4(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *AddAdvertToUserCartRequest) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonDdb0949aDecodeGithubComGoParkMailRu20242BogoSortInternalEntityDto4(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *AddAdvertToUserCartRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonDdb0949aDecodeGithubComGoParkMailRu20242BogoSortInternalEntityDto4(l, v)
}
