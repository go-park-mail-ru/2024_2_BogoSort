// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package dto

import (
	json "encoding/json"
	entity "github.com/go-park-mail-ru/2024_2_BogoSort/internal/entity"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson40eb0d12DecodeGithubComGoParkMailRu20242BogoSortInternalEntityDto(in *jlexer.Lexer, out *PriceHistoryResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "advert_id":
			if data := in.UnsafeBytes(); in.Ok() {
				in.AddError((out.AdvertID).UnmarshalText(data))
			}
		case "advert_history":
			if in.IsNull() {
				in.Skip()
				out.AdvertHistory = nil
			} else {
				in.Delim('[')
				if out.AdvertHistory == nil {
					if !in.IsDelim(']') {
						out.AdvertHistory = make([]entity.PriceHistory, 0, 0)
					} else {
						out.AdvertHistory = []entity.PriceHistory{}
					}
				} else {
					out.AdvertHistory = (out.AdvertHistory)[:0]
				}
				for !in.IsDelim(']') {
					var v1 entity.PriceHistory
					easyjson40eb0d12DecodeGithubComGoParkMailRu20242BogoSortInternalEntity(in, &v1)
					out.AdvertHistory = append(out.AdvertHistory, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson40eb0d12EncodeGithubComGoParkMailRu20242BogoSortInternalEntityDto(out *jwriter.Writer, in PriceHistoryResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"advert_id\":"
		out.RawString(prefix[1:])
		out.RawText((in.AdvertID).MarshalText())
	}
	{
		const prefix string = ",\"advert_history\":"
		out.RawString(prefix)
		if in.AdvertHistory == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v2, v3 := range in.AdvertHistory {
				if v2 > 0 {
					out.RawByte(',')
				}
				easyjson40eb0d12EncodeGithubComGoParkMailRu20242BogoSortInternalEntity(out, v3)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v PriceHistoryResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson40eb0d12EncodeGithubComGoParkMailRu20242BogoSortInternalEntityDto(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v PriceHistoryResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson40eb0d12EncodeGithubComGoParkMailRu20242BogoSortInternalEntityDto(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *PriceHistoryResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson40eb0d12DecodeGithubComGoParkMailRu20242BogoSortInternalEntityDto(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *PriceHistoryResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson40eb0d12DecodeGithubComGoParkMailRu20242BogoSortInternalEntityDto(l, v)
}
func easyjson40eb0d12DecodeGithubComGoParkMailRu20242BogoSortInternalEntity(in *jlexer.Lexer, out *entity.PriceHistory) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "ID":
			if data := in.UnsafeBytes(); in.Ok() {
				in.AddError((out.ID).UnmarshalText(data))
			}
		case "AdvertID":
			if data := in.UnsafeBytes(); in.Ok() {
				in.AddError((out.AdvertID).UnmarshalText(data))
			}
		case "OldPrice":
			out.OldPrice = int(in.Int())
		case "NewPrice":
			out.NewPrice = int(in.Int())
		case "ChangedAt":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.ChangedAt).UnmarshalJSON(data))
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson40eb0d12EncodeGithubComGoParkMailRu20242BogoSortInternalEntity(out *jwriter.Writer, in entity.PriceHistory) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"ID\":"
		out.RawString(prefix[1:])
		out.RawText((in.ID).MarshalText())
	}
	{
		const prefix string = ",\"AdvertID\":"
		out.RawString(prefix)
		out.RawText((in.AdvertID).MarshalText())
	}
	{
		const prefix string = ",\"OldPrice\":"
		out.RawString(prefix)
		out.Int(int(in.OldPrice))
	}
	{
		const prefix string = ",\"NewPrice\":"
		out.RawString(prefix)
		out.Int(int(in.NewPrice))
	}
	{
		const prefix string = ",\"ChangedAt\":"
		out.RawString(prefix)
		out.Raw((in.ChangedAt).MarshalJSON())
	}
	out.RawByte('}')
}
