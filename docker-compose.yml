services:
  # ----------------------------------------------
  # БД: Postgres, Redis
  # ----------------------------------------------
  postgres:
    image: postgres:13
    restart: always
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
      - SERVICE_USER=${SERVICE_USER}
      - SERVICE_PASSWORD=${SERVICE_PASSWORD}
      - POSTGRES_SSL=on
    volumes:
      - pgdata:/var/lib/postgresql/data
      - ./db/config/postgres_custom.conf:/etc/postgresql/postgresql.conf
      - ./db/config/pg_hba.conf:/etc/postgresql/pg_hba.conf
      - ./db/config/scripts/00_init_postgres_db.sh:/docker-entrypoint-initdb.d/00_init_postgres_db.sh
    entrypoint: ["/bin/sh", "-c", "chmod +x /docker-entrypoint-initdb.d/00_init_postgres_db.sh && /docker-entrypoint-initdb.d/00_init_postgres_db.sh"]
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 5s
      timeout: 5s
      retries: 10
      start_period: 10s
    networks:
      - app-network

  redis:
    image: redis:6
    restart: always
    ports:
      - "6381:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - app-network

  migrate:
    image: migrate/migrate
    depends_on:
      postgres:
        condition: service_healthy
    command: [
      "-path", "/db/migrations",
      "-database", "postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}?sslmode=disable",
      "up"
    ]
    volumes:
      - ./db/migrations:/db/migrations
    networks:
      - app-network
    restart: on-failure:3

  # ----------------------------------------------
  # Сервисы
  # ----------------------------------------------
  auth:
    restart: always
    build:
      context: .
      dockerfile: ./docker/auth.dockerfile
    ports:
      - "50051:50051"
      - "7051:7051"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      migrate:
        condition: service_completed_successfully
    volumes:
      - ./config/config.yaml:/config/config.yaml
      - ./static_files:/app/static_files/
      - pgdata:/etc/postgresql/certs:ro
    healthcheck:
      test: ["CMD", "grpc_health_probe", "-addr=:50051"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - app-network

  static:
    restart: always
    build:
      context: .
      dockerfile: ./docker/static.dockerfile
    ports:
      - "50053:50053"
      - "7053:7053"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      migrate:
        condition: service_completed_successfully
    volumes:
      - ./config/config.yaml:/config/config.yaml
      - ./static_files:/app/static_files/
      - pgdata:/etc/postgresql/certs:ro
    healthcheck:
      test: ["CMD", "grpc_health_probe", "-addr=:50053"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - app-network

  cart_purchase:
    restart: always
    build:
      context: .
      dockerfile: ./docker/cart_purchase.dockerfile
    ports:
      - "50052:50052"
      - "7052:7052"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      migrate:
        condition: service_completed_successfully
    volumes:
      - ./config/config.yaml:/config/config.yaml
      - ./static_files:/app/static_files/
      - pgdata:/etc/postgresql/certs:ro
    healthcheck:
      test: ["CMD", "grpc_health_probe", "-addr=:50052"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - app-network

  app:
    restart: always
    build:
      context: .
      dockerfile: ./docker/core.dockerfile
    ports:
      - "8080:8080"
    environment:
      - DATABASE_URL=${DATABASE_URL}
      - PAYMENT_SHOP_ID=${PAYMENT_SHOP_ID}
      - PAYMENT_SECRET=${PAYMENT_SECRET}
    depends_on:
      - postgres
      - redis
      - migrate
      - auth
      - static
      - cart_purchase
    volumes:
      - ./config/config.yaml:/config/config.yaml
      - ./static_files:/app/static_files/
      - pgdata:/etc/postgresql/certs:ro
    networks:
      - app-network

  # ----------------------------------------------
  # Prometheus и Grafana
  # ----------------------------------------------
  # node_exporter:
  #   image: prom/node-exporter
  #   restart: always
  #   ports:
  #     - "9100:9100"
  #   networks:
  #     - app-network

  # prometheus:
  #   image: prom/prometheus:latest
  #   restart: always
  #   ports:
  #     - "9090:9090"
  #   volumes:
  #     - ./prometheus.yml:/etc/prometheus/prometheus.yml
  #     - prometheus_data:/prometheus
  #   command:
  #     - '--config.file=/etc/prometheus/prometheus.yml'
  #     - '--storage.tsdb.path=/prometheus'
  #   depends_on:
  #     node_exporter:
  #       condition: service_started
  #     app:
  #       condition: service_started
  #   networks:
  #     - app-network

  # # loki:
  # #   image: grafana/loki:2.7.1
  # #   ports:
  # #     - "3100:3100"
  # #   command: -config.file=/etc/loki/local-config.yaml
  # #   volumes:
  # #     - ./loki-config.yml:/etc/loki/local-config.yaml
  # #     - loki_data:/loki
  # #   networks:
  # #     - app-network

  # # promtail:
  # #   image: grafana/promtail:2.7.1
  # #   volumes:
  # #     - ./promtail-config.yml:/etc/promtail/config.yml
  # #     - /var/log:/var/log
  # #   command: -config.file=/etc/promtail/config.yml
  # #   networks:
  # #     - app-network
      
  # grafana:
  #   image: grafana/grafana:latest
  #   container_name: grafana
  #   ports:
  #     - "8010:3000"
  #   volumes:
  #     - ./grafana/provisioning/datasources:/etc/grafana/provisioning/datasources
  #     - ./grafana/provisioning/dashboards:/etc/grafana/provisioning/dashboards
  #     - ./grafana/dashboards:/var/lib/grafana/dashboards
  #   environment:
  #     - GF_SECURITY_ADMIN_USER=${GRAFANA_ADMIN_USER}
  #     - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD}
  #   depends_on:
  #     - prometheus
  #   networks:
  #     - app-network
      
networks:
  app-network:
    driver: bridge

volumes:
  pgdata:
  prometheus_data:
  # loki_data: