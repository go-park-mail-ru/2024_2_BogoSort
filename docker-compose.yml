services:
  # ----------------------------------------------
  # БД: Postgres, Redis
  # ----------------------------------------------
  postgres:
    image: postgres:13
    restart: always
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=emporiumdb
    volumes:
      - pgdata:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:6
    restart: always
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  migrate:
    image: migrate/migrate
    depends_on:
      postgres:
        condition: service_healthy
    entrypoint: [
      "migrate",
      "-path=/db/migrations",
      "-database=postgres://postgres:postgres@postgres:5432/emporiumdb?sslmode=disable",
      "up"
    ]
    volumes:
      - ./db/migrations:/db/migrations

  # ----------------------------------------------
  # Сервисы
  # ----------------------------------------------
  auth:
    restart: always
    build:
      context: .
      dockerfile: ./docker/auth.dockerfile
    ports:
      - "50051:50051"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      migrate:
        condition: service_completed_successfully
    volumes:
      - ./config/config.yaml:/config/config.yaml
      - ./static_files:/app/static_files/
    healthcheck:
      test: ["CMD", "grpc_health_probe", "-addr=:50051"]
      interval: 30s
      timeout: 10s
      retries: 3

  static:
    restart: always
    build:
      context: .
      dockerfile: ./docker/static.dockerfile
    ports:
      - "50053:50053"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      migrate:
        condition: service_completed_successfully
    volumes:
      - ./config/config.yaml:/config/config.yaml
      - ./static_files:/app/static_files/
    healthcheck:
      test: ["CMD", "grpc_health_probe", "-addr=:50053"]
      interval: 30s
      timeout: 10s
      retries: 3

  cart_purchase:
    restart: always
    build:
      context: .
      dockerfile: ./docker/cart_purchase.dockerfile
    ports:
      - "50052:50052"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      migrate:
        condition: service_completed_successfully
    volumes:
      - ./config/config.yaml:/config/config.yaml
      - ./static_files:/app/static_files/
    healthcheck:
      test: ["CMD", "grpc_health_probe", "-addr=:50052"]
      interval: 30s
      timeout: 10s
      retries: 3

  app:
    restart: always
    build:
      context: .
      dockerfile: ./docker/core.dockerfile
    ports:
      - "8080:8080"
    environment:
      - DATABASE_URL=postgres://postgres:postgres@postgres:5432/emporiumdb
    depends_on:
      - postgres
      - redis
      - migrate
      - auth
      - static
      - cart_purchase
    volumes:
      - ./config/config.yaml:/config/config.yaml
      - ./static_files:/app/static_files/
    healthcheck:
      test: ["CMD", "grpc_health_probe", "-addr=:8080"]
      interval: 30s
      timeout: 10s
      retries: 3

  # ----------------------------------------------
  # Prometheus и Grafana
  # ----------------------------------------------
  prometheus:
    image: prom/prometheus:latest
    restart: always
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'

  grafana:
    image: grafana/grafana
    restart: always
    ports:
      - "3000:3000"

  node_exporter:
    image: prom/node-exporter
    restart: always
    ports:
      - "9100:9100"

networks:
  app-network:
    driver: bridge

volumes:
  pgdata:
  prometheus_data: