definitions:
  dto.AddAdvertToUserCartRequest:
    properties:
      advert_id:
        type: string
      user_id:
        type: string
    type: object
  dto.Advert:
    properties:
      category_id:
        type: string
      created_at:
        type: string
      description:
        type: string
      has_delivery:
        type: boolean
      id:
        type: string
      image_id:
        type: string
      location:
        type: string
      price:
        type: integer
      promoted_until:
        type: string
      saves_number:
        type: integer
      seller_id:
        type: string
      status:
        $ref: '#/definitions/dto.AdvertStatus'
      title:
        type: string
      updated_at:
        type: string
      views_number:
        type: integer
    type: object
  dto.AdvertCard:
    properties:
      advert:
        $ref: '#/definitions/dto.Advert'
      is_saved:
        type: boolean
      is_viewed:
        type: boolean
    type: object
  dto.AdvertRequest:
    properties:
      category_id:
        type: string
      description:
        type: string
      has_delivery:
        type: boolean
      location:
        type: string
      price:
        type: integer
      status:
        $ref: '#/definitions/dto.AdvertStatus'
      title:
        type: string
    type: object
  dto.AdvertStatus:
    enum:
    - active
    - inactive
    - reserved
    type: string
    x-enum-varnames:
    - AdvertStatusActive
    - AdvertStatusInactive
    - AdvertStatusReserved
  dto.Cart:
    properties:
      cart_purchases:
        items:
          $ref: '#/definitions/dto.CartPurchase'
        type: array
      id:
        type: string
      status:
        $ref: '#/definitions/entity.CartStatus'
      user_id:
        type: string
    type: object
  dto.CartPurchase:
    properties:
      adverts:
        items:
          $ref: '#/definitions/dto.PreviewAdvertCard'
        type: array
      seller_id:
        type: string
    type: object
  dto.CartResponse:
    properties:
      cart:
        $ref: '#/definitions/dto.Cart'
    type: object
  dto.DeleteAdvertFromUserCartRequest:
    properties:
      advert_id:
        type: string
      cart_id:
        type: string
    type: object
  dto.DeliveryMethod:
    enum:
    - pickup
    - delivery
    type: string
    x-enum-varnames:
    - DeliveryMethodPickup
    - DeliveryMethodDelivery
  dto.Login:
    properties:
      email:
        type: string
      password:
        type: string
    type: object
  dto.MyPreviewAdvertCard:
    properties:
      preview:
        $ref: '#/definitions/dto.PreviewAdvert'
      saves_number:
        type: integer
      views_number:
        type: integer
    type: object
  dto.PaymentMethod:
    enum:
    - card
    - cash
    type: string
    x-enum-varnames:
    - PaymentMethodCard
    - PaymentMethodCash
  dto.PreviewAdvert:
    properties:
      category_id:
        type: string
      has_delivery:
        type: boolean
      id:
        type: string
      image_id:
        type: string
      location:
        type: string
      price:
        type: integer
      promoted_until:
        type: string
      seller_id:
        type: string
      status:
        $ref: '#/definitions/dto.AdvertStatus'
      title:
        type: string
    type: object
  dto.PreviewAdvertCard:
    properties:
      is_saved:
        type: boolean
      is_viewed:
        type: boolean
      preview:
        $ref: '#/definitions/dto.PreviewAdvert'
    type: object
  dto.PriceHistoryResponse:
    properties:
      advert_history:
        items:
          $ref: '#/definitions/entity.PriceHistory'
        type: array
      advert_id:
        type: string
    type: object
  dto.PurchaseRequest:
    properties:
      address:
        type: string
      cart_id:
        type: string
      delivery_method:
        $ref: '#/definitions/dto.DeliveryMethod'
      payment_method:
        $ref: '#/definitions/dto.PaymentMethod'
      user_id:
        type: string
    type: object
  dto.PurchaseResponse:
    properties:
      address:
        type: string
      adverts:
        items:
          $ref: '#/definitions/dto.PreviewAdvertCard'
        type: array
      customer_id:
        type: string
      delivery_method:
        $ref: '#/definitions/dto.DeliveryMethod'
      id:
        type: string
      payment_method:
        $ref: '#/definitions/dto.PaymentMethod'
      seller_id:
        type: string
      status:
        $ref: '#/definitions/dto.PurchaseStatus'
    type: object
  dto.PurchaseStatus:
    enum:
    - pending
    - completed
    - in_progress
    - canceled
    type: string
    x-enum-varnames:
    - StatusPending
    - StatusCompleted
    - StatusFailed
    - StatusCanceled
  dto.Signup:
    properties:
      email:
        type: string
      password:
        type: string
    type: object
  dto.UpdatePassword:
    properties:
      new_password:
        type: string
      old_password:
        type: string
    type: object
  dto.User:
    properties:
      avatar_id:
        default: 00000000-0000-0000-0000-000000000000
        type: string
      created_at:
        type: string
      email:
        type: string
      id:
        type: string
      phone:
        type: string
      status:
        default: active
        type: string
      updated_at:
        type: string
      username:
        type: string
    type: object
  dto.UserUpdate:
    properties:
      email:
        type: string
      id:
        type: string
      phone:
        type: string
      username:
        type: string
    type: object
  entity.CartStatus:
    enum:
    - active
    - inactive
    type: string
    x-enum-varnames:
    - CartStatusActive
    - CartStatusInactive
  entity.Category:
    properties:
      id:
        type: string
      title:
        type: string
    type: object
  entity.PriceHistory:
    properties:
      advertID:
        type: string
      changedAt:
        type: string
      id:
        type: string
      newPrice:
        type: integer
      oldPrice:
        type: integer
    type: object
  entity.Seller:
    properties:
      description:
        type: string
      id:
        type: string
      user_id:
        type: string
    type: object
  http.PaymentRequest:
    properties:
      item_id:
        type: string
    type: object
  utils.ErrResponse:
    properties:
      code:
        type: integer
      status:
        type: string
    type: object
info:
  contact: {}
paths:
  /api/v1/adverts:
    get:
      description: Fetch a list of all adverts with optional pagination.
      parameters:
      - description: Limit the number of results
        in: query
        name: limit
        type: integer
      - description: Offset for pagination
        in: query
        name: offset
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: List of adverts
          schema:
            items:
              $ref: '#/definitions/dto.PreviewAdvertCard'
            type: array
        "400":
          description: Invalid limit or offset
          schema:
            $ref: '#/definitions/utils.ErrResponse'
        "500":
          description: Failed to retrieve adverts
          schema:
            $ref: '#/definitions/utils.ErrResponse'
      summary: Retrieve all adverts
      tags:
      - adverts
    post:
      consumes:
      - application/json
      description: Add a new advert to the system.
      parameters:
      - description: Advert data
        in: body
        name: advert
        required: true
        schema:
          $ref: '#/definitions/dto.AdvertRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Advert created
          schema:
            $ref: '#/definitions/dto.Advert'
        "400":
          description: Invalid advert data
          schema:
            $ref: '#/definitions/utils.ErrResponse'
        "500":
          description: Failed to create advert
          schema:
            $ref: '#/definitions/utils.ErrResponse'
      summary: Create a new advert
      tags:
      - adverts
  /api/v1/adverts/{advertId}:
    delete:
      description: Remove an advert from the system using its ID.
      parameters:
      - description: Advert ID
        in: path
        name: advertId
        required: true
        type: string
      responses:
        "204":
          description: Advert deleted
        "400":
          description: Invalid advert ID
          schema:
            $ref: '#/definitions/utils.ErrResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/utils.ErrResponse'
        "404":
          description: Advert not found
          schema:
            $ref: '#/definitions/utils.ErrResponse'
        "500":
          description: Failed to delete advert
          schema:
            $ref: '#/definitions/utils.ErrResponse'
      summary: Delete an advert by ID
      tags:
      - adverts
    get:
      description: Fetch an advert based on its ID.
      parameters:
      - description: Advert ID
        in: path
        name: advertId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Advert details
          schema:
            $ref: '#/definitions/dto.AdvertCard'
        "400":
          description: Invalid advert ID
          schema:
            $ref: '#/definitions/utils.ErrResponse'
        "404":
          description: Advert not found
          schema:
            $ref: '#/definitions/utils.ErrResponse'
        "500":
          description: Failed to retrieve advert by ID
          schema:
            $ref: '#/definitions/utils.ErrResponse'
      summary: Retrieve an advert by ID
      tags:
      - adverts
    put:
      consumes:
      - application/json
      description: Modify the details of an existing advert.
      parameters:
      - description: Advert ID
        in: path
        name: advertId
        required: true
        type: string
      - description: Updated advert data
        in: body
        name: advert
        required: true
        schema:
          $ref: '#/definitions/dto.AdvertRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Advert updated successfully
          schema:
            type: string
        "400":
          description: Invalid advert data
          schema:
            $ref: '#/definitions/utils.ErrResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/utils.ErrResponse'
        "404":
          description: Advert not found
          schema:
            $ref: '#/definitions/utils.ErrResponse'
        "500":
          description: Failed to update advert
          schema:
            $ref: '#/definitions/utils.ErrResponse'
      summary: Update an existing advert
      tags:
      - adverts
  /api/v1/adverts/{advertId}/image:
    put:
      description: Upload an image associated with an advert by its ID.
      parameters:
      - description: Advert ID
        in: path
        name: advertId
        required: true
        type: string
      - description: Image file to upload
        in: formData
        name: image
        required: true
        type: file
      responses:
        "200":
          description: Image uploaded
          schema:
            type: string
        "400":
          description: Invalid advert ID or file not attached
          schema:
            $ref: '#/definitions/utils.ErrResponse'
        "500":
          description: Failed to upload image
          schema:
            $ref: '#/definitions/utils.ErrResponse'
      summary: Upload an image for an advert
      tags:
      - adverts
  /api/v1/adverts/{advertId}/status:
    put:
      description: Change the status of an advert by its ID.
      parameters:
      - description: Advert ID
        in: path
        name: advertId
        required: true
        type: string
      - description: New status
        in: body
        name: status
        required: true
        schema:
          type: string
      responses:
        "200":
          description: Advert status updated
        "400":
          description: Invalid advert ID or status
          schema:
            $ref: '#/definitions/utils.ErrResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/utils.ErrResponse'
        "404":
          description: Advert not found
          schema:
            $ref: '#/definitions/utils.ErrResponse'
        "500":
          description: Failed to update advert status
          schema:
            $ref: '#/definitions/utils.ErrResponse'
      summary: Update the status of an advert
      tags:
      - adverts
  /api/v1/adverts/cart/{cartId}:
    get:
      description: Fetch a list of adverts in the specified cart.
      parameters:
      - description: Cart ID
        in: path
        name: cartId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: List of adverts in cart
          schema:
            items:
              $ref: '#/definitions/dto.PreviewAdvertCard'
            type: array
        "400":
          description: Invalid cart ID
          schema:
            $ref: '#/definitions/utils.ErrResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/utils.ErrResponse'
        "500":
          description: Failed to retrieve adverts by cart ID
          schema:
            $ref: '#/definitions/utils.ErrResponse'
      summary: Retrieve adverts by cart ID
      tags:
      - adverts
  /api/v1/adverts/category/{categoryId}:
    get:
      description: Fetch a list of adverts associated with a specific category ID.
      parameters:
      - description: Category ID
        in: path
        name: categoryId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: List of adverts by category ID
          schema:
            items:
              $ref: '#/definitions/dto.PreviewAdvertCard'
            type: array
        "400":
          description: Invalid category ID
          schema:
            $ref: '#/definitions/utils.ErrResponse'
        "500":
          description: Failed to retrieve adverts by category ID
          schema:
            $ref: '#/definitions/utils.ErrResponse'
      summary: Retrieve adverts by category ID
      tags:
      - adverts
  /api/v1/adverts/my:
    get:
      description: Fetch a list of adverts associated with a specific user ID.
      responses:
        "200":
          description: List of adverts by user ID
          schema:
            items:
              $ref: '#/definitions/dto.MyPreviewAdvertCard'
            type: array
        "400":
          description: Invalid user ID
          schema:
            $ref: '#/definitions/utils.ErrResponse'
        "500":
          description: Failed to retrieve adverts by user ID
          schema:
            $ref: '#/definitions/utils.ErrResponse'
      summary: Retrieve adverts by user ID
      tags:
      - adverts
  /api/v1/adverts/saved:
    get:
      description: Fetch a list of adverts saved by the specified user ID.
      parameters:
      - description: User ID
        in: path
        name: userId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: List of adverts saved by user
          schema:
            items:
              $ref: '#/definitions/dto.PreviewAdvertCard'
            type: array
        "400":
          description: Invalid user ID
          schema:
            $ref: '#/definitions/utils.ErrResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/utils.ErrResponse'
        "500":
          description: Failed to retrieve adverts by user ID
          schema:
            $ref: '#/definitions/utils.ErrResponse'
      summary: Retrieve adverts by user ID
      tags:
      - adverts
  /api/v1/adverts/saved/{advertId}:
    delete:
      description: Remove an advert from saved by its ID.
      parameters:
      - description: Advert ID
        in: path
        name: advertId
        required: true
        type: string
      responses:
        "200":
          description: Advert removed from saved
        "400":
          description: Invalid advert ID
          schema:
            $ref: '#/definitions/utils.ErrResponse'
        "404":
          description: Advert not found
          schema:
            $ref: '#/definitions/utils.ErrResponse'
        "500":
          description: Failed to remove advert from saved
          schema:
            $ref: '#/definitions/utils.ErrResponse'
      summary: Remove an advert from saved
      tags:
      - adverts
    post:
      description: Add an advert to saved by its ID.
      parameters:
      - description: Advert ID
        in: path
        name: advertId
        required: true
        type: string
      responses:
        "200":
          description: Advert added to saved
        "400":
          description: Invalid advert ID
          schema:
            $ref: '#/definitions/utils.ErrResponse'
        "404":
          description: Advert not found
          schema:
            $ref: '#/definitions/utils.ErrResponse'
        "500":
          description: Failed to add advert to saved
          schema:
            $ref: '#/definitions/utils.ErrResponse'
      summary: Add an advert to saved
      tags:
      - adverts
  /api/v1/adverts/search:
    get:
      description: Выполняет поиск объявлений по строке запроса с разбивкой на батчи.
      parameters:
      - description: Строка поиска
        in: query
        name: query
        required: true
        type: string
      - description: Лимит результатов (по умолчанию 100)
        in: query
        name: limit
        type: integer
      - description: Смещение для пагинации (по умолчанию 0)
        in: query
        name: offset
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Список найденных объявлений
          schema:
            items:
              $ref: '#/definitions/dto.PreviewAdvertCard'
            type: array
        "400":
          description: Неверные параметры запроса
          schema:
            $ref: '#/definitions/utils.ErrResponse'
        "500":
          description: Ошибка сервера
          schema:
            $ref: '#/definitions/utils.ErrResponse'
      summary: Поиск объявлений
      tags:
      - adverts
  /api/v1/adverts/seller/{sellerId}:
    get:
      description: Fetch a list of adverts associated with a specific seller ID.
      parameters:
      - description: Seller ID
        in: path
        name: sellerId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: List of adverts
          schema:
            items:
              $ref: '#/definitions/dto.PreviewAdvertCard'
            type: array
        "400":
          description: Invalid seller ID
          schema:
            $ref: '#/definitions/utils.ErrResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/utils.ErrResponse'
        "500":
          description: Failed to retrieve adverts by seller ID
          schema:
            $ref: '#/definitions/utils.ErrResponse'
      summary: Retrieve adverts by seller ID
      tags:
      - adverts
  /api/v1/cart/{cart_id}:
    get:
      consumes:
      - application/json
      description: Retrieves a cart by its unique identifier
      parameters:
      - description: Cart ID (UUID format)
        in: path
        name: cart_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Cart details successfully retrieved
          schema:
            $ref: '#/definitions/dto.CartResponse'
        "400":
          description: Invalid cart ID format or missing cart_id
          schema:
            $ref: '#/definitions/utils.ErrResponse'
        "404":
          description: Cart not found
          schema:
            $ref: '#/definitions/utils.ErrResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/utils.ErrResponse'
      summary: Get cart by ID
      tags:
      - Cart
  /api/v1/cart/add:
    post:
      consumes:
      - application/json
      description: Adds an advertisement to a user's cart
      parameters:
      - description: Add to cart request containing user_id and advert_id
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.AddAdvertToUserCartRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Successfully added item to cart
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Invalid request body
          schema:
            $ref: '#/definitions/utils.ErrResponse'
        "404":
          description: Cart not found
          schema:
            $ref: '#/definitions/utils.ErrResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/utils.ErrResponse'
      summary: Add item to cart
      tags:
      - Cart
  /api/v1/cart/delete:
    delete:
      consumes:
      - application/json
      description: Removes an advertisement from a user's cart
      parameters:
      - description: Delete from cart request containing cart_id and advert_id
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.DeleteAdvertFromUserCartRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Successfully removed item from cart
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Invalid request body
          schema:
            $ref: '#/definitions/utils.ErrResponse'
        "404":
          description: Cart or item not found
          schema:
            $ref: '#/definitions/utils.ErrResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/utils.ErrResponse'
      summary: Remove item from cart
      tags:
      - Cart
  /api/v1/cart/exists/{user_id}:
    get:
      consumes:
      - application/json
      description: Checks if a cart exists for a specific user
      parameters:
      - description: User ID (UUID format)
        in: path
        name: user_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Cart existence status with cart_id if exists
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Invalid user ID format or missing user_id
          schema:
            $ref: '#/definitions/utils.ErrResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/utils.ErrResponse'
      summary: Check cart existence
      tags:
      - Cart
  /api/v1/cart/user/{user_id}:
    get:
      consumes:
      - application/json
      description: Retrieves a cart associated with a specific user
      parameters:
      - description: User ID (UUID format)
        in: path
        name: user_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Cart details successfully retrieved
          schema:
            $ref: '#/definitions/dto.CartResponse'
        "400":
          description: Invalid user ID format or missing user_id
          schema:
            $ref: '#/definitions/utils.ErrResponse'
        "404":
          description: Cart not found for user
          schema:
            $ref: '#/definitions/utils.ErrResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/utils.ErrResponse'
      summary: Get cart by user ID
      tags:
      - Cart
  /api/v1/categories:
    get:
      consumes:
      - application/json
      description: Retrieve a list of all categories
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/entity.Category'
            type: array
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.ErrResponse'
      summary: Get all categories
      tags:
      - categories
  /api/v1/csrf-token:
    get:
      consumes:
      - application/json
      description: This endpoint checks for a session ID in the request cookies and
        retrieves the user ID from the session manager. If both are valid, it generates
        a CSRF token using the session ID and user ID, and sends it back in the response
        header. If any step fails, it responds with an appropriate error message.
      produces:
      - application/json
      responses:
        "200":
          description: CSRF Token
          schema:
            type: string
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/utils.ErrResponse'
        "500":
          description: Failed to create CSRF token
          schema:
            $ref: '#/definitions/utils.ErrResponse'
      summary: Retrieve CSRF Token
      tags:
      - CSRF
  /api/v1/files/{fileId}:
    get:
      description: Get a file by its ID
      parameters:
      - description: File ID
        in: path
        name: fileId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: URL of the static file
          schema:
            type: string
        "400":
          description: Invalid static ID
          schema:
            $ref: '#/definitions/utils.ErrResponse'
        "404":
          description: Static file not found
          schema:
            $ref: '#/definitions/utils.ErrResponse'
        "500":
          description: Failed to get static file
          schema:
            $ref: '#/definitions/utils.ErrResponse'
      summary: Get file by ID
      tags:
      - static
  /api/v1/files/stream/{fileId}:
    get:
      description: Get a static file as a byte stream by its ID
      parameters:
      - description: File ID
        in: path
        name: fileId
        required: true
        type: string
      produces:
      - application/octet-stream
      responses:
        "200":
          description: Static file content
          schema:
            type: binary
        "400":
          description: Invalid file ID
          schema:
            $ref: '#/definitions/utils.ErrResponse'
        "404":
          description: Static file not found
          schema:
            $ref: '#/definitions/utils.ErrResponse'
        "500":
          description: Failed to get static file
          schema:
            $ref: '#/definitions/utils.ErrResponse'
      summary: Get static file stream by ID
      tags:
      - static
  /api/v1/history/{advert_id}:
    get:
      consumes:
      - application/json
      description: Получает историю изменения цены для указанного объявления
      parameters:
      - description: Advert ID
        in: path
        name: advert_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/dto.PriceHistoryResponse'
            type: array
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/utils.ErrResponse'
      summary: Get Advert Price History
      tags:
      - History
  /api/v1/login:
    post:
      consumes:
      - application/json
      description: Allows a user to log into the system
      parameters:
      - description: Login data
        in: body
        name: login
        required: true
        schema:
          $ref: '#/definitions/dto.Login'
      produces:
      - application/json
      responses:
        "200":
          description: SessionID
          schema:
            type: string
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/utils.ErrResponse'
        "401":
          description: Invalid credentials or unauthorized access
          schema:
            $ref: '#/definitions/utils.ErrResponse'
        "404":
          description: User not found
          schema:
            $ref: '#/definitions/utils.ErrResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/utils.ErrResponse'
      summary: User login
      tags:
      - Users
  /api/v1/logout:
    post:
      consumes:
      - application/json
      description: Allows the user to log out of the system by deleting their session
      produces:
      - application/json
      responses:
        "200":
          description: You have successfully logged out
          schema:
            type: string
        "400":
          description: Invalid request or missing cookie
          schema:
            $ref: '#/definitions/utils.ErrResponse'
        "401":
          description: Unauthorized access
          schema:
            $ref: '#/definitions/utils.ErrResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/utils.ErrResponse'
      summary: User logout
      tags:
      - Authentication
  /api/v1/me:
    get:
      consumes:
      - application/json
      description: Returns information about the currently authenticated user
      produces:
      - application/json
      responses:
        "200":
          description: User information
          schema:
            $ref: '#/definitions/dto.User'
        "401":
          description: Unauthorized access
          schema:
            $ref: '#/definitions/utils.ErrResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/utils.ErrResponse'
      summary: Get current user information
      tags:
      - Users
  /api/v1/password:
    post:
      consumes:
      - application/json
      description: Allows a user to change their password
      parameters:
      - description: Password change data
        in: body
        name: password
        required: true
        schema:
          $ref: '#/definitions/dto.UpdatePassword'
      produces:
      - application/json
      responses:
        "200":
          description: Password changed successfully
          schema:
            type: string
        "400":
          description: Invalid data
          schema:
            $ref: '#/definitions/utils.ErrResponse'
        "401":
          description: Unauthorized access
          schema:
            $ref: '#/definitions/utils.ErrResponse'
        "404":
          description: User not found
          schema:
            $ref: '#/definitions/utils.ErrResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/utils.ErrResponse'
      summary: Change user password
      tags:
      - Users
  /api/v1/payment/init:
    post:
      consumes:
      - application/json
      description: Initiates a payment process for a given item ID.
      parameters:
      - description: Payment Request
        in: body
        name: paymentRequest
        required: true
        schema:
          $ref: '#/definitions/http.PaymentRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Payment URL
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Invalid request or payment service error
          schema:
            $ref: '#/definitions/utils.ErrResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/utils.ErrResponse'
      summary: Initialize payment
      tags:
      - payment
  /api/v1/profile:
    put:
      consumes:
      - application/json
      description: Allows a user to update their profile information
      parameters:
      - description: Profile data
        in: body
        name: profile
        required: true
        schema:
          $ref: '#/definitions/dto.UserUpdate'
      produces:
      - application/json
      responses:
        "200":
          description: Profile updated successfully
          schema:
            type: string
        "400":
          description: Invalid data
          schema:
            $ref: '#/definitions/utils.ErrResponse'
        "401":
          description: Unauthorized access
          schema:
            $ref: '#/definitions/utils.ErrResponse'
        "404":
          description: User not found
          schema:
            $ref: '#/definitions/utils.ErrResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/utils.ErrResponse'
      summary: Update user profile
      tags:
      - Users
  /api/v1/profile/{user_id}:
    get:
      consumes:
      - application/json
      description: Returns user information by their ID
      parameters:
      - description: User ID
        in: path
        name: user_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: User profile
          schema:
            $ref: '#/definitions/dto.User'
        "404":
          description: User not found
          schema:
            $ref: '#/definitions/utils.ErrResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/utils.ErrResponse'
      summary: Get user profile
      tags:
      - Users
  /api/v1/purchase/{user_id}:
    get:
      consumes:
      - application/json
      description: Retrieves all purchases associated with a specific user ID
      parameters:
      - description: User ID
        format: uuid
        in: path
        name: user_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: List of user purchases
          schema:
            items:
              $ref: '#/definitions/dto.PurchaseResponse'
            type: array
        "400":
          description: Invalid user ID
          schema:
            $ref: '#/definitions/utils.ErrResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/utils.ErrResponse'
      summary: Get user purchases
      tags:
      - Purchases
    post:
      consumes:
      - application/json
      description: Creates a new purchase record for a user
      parameters:
      - description: User ID
        format: uuid
        in: path
        name: user_id
        required: true
        type: string
      - description: Purchase details
        in: body
        name: purchase
        required: true
        schema:
          $ref: '#/definitions/dto.PurchaseRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Purchase created successfully
          schema:
            $ref: '#/definitions/dto.PurchaseResponse'
        "400":
          description: Invalid request parameters or user ID
          schema:
            $ref: '#/definitions/utils.ErrResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/utils.ErrResponse'
      summary: Create new purchase
      tags:
      - Purchases
  /api/v1/seller/{seller_id}:
    get:
      consumes:
      - application/json
      description: Возвращает информацию о продавце по его ID
      parameters:
      - description: ID продавца
        in: path
        name: seller_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Информация о продавце
          schema:
            $ref: '#/definitions/entity.Seller'
        "400":
          description: Некорректный запрос
          schema:
            $ref: '#/definitions/utils.ErrResponse'
        "404":
          description: Продавец не найден
          schema:
            $ref: '#/definitions/utils.ErrResponse'
        "500":
          description: Внутренняя ошибка сервера
          schema:
            $ref: '#/definitions/utils.ErrResponse'
      summary: Получение продавца по ID
      tags:
      - Продавцы
  /api/v1/seller/user/{user_id}:
    get:
      consumes:
      - application/json
      description: Возвращает информацию о продавце, связанном с указанным ID пользователя
      parameters:
      - description: ID пользователя
        in: path
        name: user_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Информация о продавце
          schema:
            $ref: '#/definitions/entity.Seller'
        "400":
          description: Некорректный ID пользователя
          schema:
            $ref: '#/definitions/utils.ErrResponse'
        "404":
          description: Продавец не найден
          schema:
            $ref: '#/definitions/utils.ErrResponse'
        "500":
          description: Внутренняя ошибка сервера
          schema:
            $ref: '#/definitions/utils.ErrResponse'
      summary: Получить продавца по ID пользователя
      tags:
      - Продавцы
  /api/v1/signup:
    post:
      consumes:
      - application/json
      description: Creates a new user in the system
      parameters:
      - description: Registration data
        in: body
        name: signup
        required: true
        schema:
          $ref: '#/definitions/dto.Signup'
      produces:
      - application/json
      responses:
        "200":
          description: SessionID
          schema:
            type: string
        "400":
          description: Invalid request or user already exists
          schema:
            $ref: '#/definitions/utils.ErrResponse'
        "401":
          description: Unauthorized request
          schema:
            $ref: '#/definitions/utils.ErrResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/utils.ErrResponse'
      summary: User registration
      tags:
      - Users
  /api/v1/user/{user_id}/image:
    put:
      description: Upload an image associated with an advert by its ID
      parameters:
      - description: User ID
        in: path
        name: user_id
        required: true
        type: string
      - description: Image file to upload
        in: formData
        name: image
        required: true
        type: file
      responses:
        "200":
          description: Image uploaded
          schema:
            type: string
        "400":
          description: Invalid user ID or file not attached
          schema:
            $ref: '#/definitions/utils.ErrResponse'
        "500":
          description: Failed to upload image
          schema:
            $ref: '#/definitions/utils.ErrResponse'
      summary: Upload an image for an advert
      tags:
      - adverts
swagger: "2.0"
