definitions:
  dto.AdvertRequest:
    properties:
      category_id:
        type: string
      description:
        type: string
      has_delivery:
        type: boolean
      location:
        type: string
      price:
        type: integer
      seller_id:
        type: string
      status:
        $ref: '#/definitions/dto.AdvertStatus'
      title:
        type: string
    type: object
  dto.AdvertResponse:
    properties:
      category_id:
        type: string
      description:
        type: string
      has_delivery:
        type: boolean
      id:
        type: string
      image_url:
        type: string
      location:
        type: string
      price:
        type: integer
      seller_id:
        type: string
      status:
        $ref: '#/definitions/dto.AdvertStatus'
      title:
        type: string
    type: object
  dto.AdvertStatus:
    enum:
    - active
    - inactive
    type: string
    x-enum-varnames:
    - AdvertStatusActive
    - AdvertStatusInactive
  dto.Login:
    properties:
      email:
        type: string
      password:
        type: string
    type: object
  dto.PurchaseRequest:
    properties:
      cart_id:
        type: string
    type: object
  dto.PurchaseResponse:
    properties:
      success:
        type: boolean
    type: object
  dto.Signup:
    properties:
      email:
        type: string
      password:
        type: string
    type: object
  dto.UpdatePassword:
    properties:
      new_password:
        type: string
      old_password:
        type: string
    type: object
  dto.User:
    properties:
      avatar_id:
        default: 00000000-0000-0000-0000-000000000000
        type: string
      email:
        type: string
      id:
        type: string
      phone:
        type: string
      status:
        default: active
        type: string
      username:
        type: string
    type: object
  entity.Category:
    properties:
      id:
        type: string
      title:
        type: string
    type: object
  entity.Seller:
    properties:
      description:
        type: string
      id:
        type: string
      user_id:
        type: string
    type: object
  utils.ErrResponse:
    properties:
      code:
        type: integer
      status:
        type: string
    type: object
info:
  contact: {}
  title: "API"
  version: "1.0.0"
paths:
  /api/v1/adverts:
    get:
      description: Fetch a list of all adverts
      parameters:
      - description: Limit the number of results
        in: query
        name: limit
        type: integer
      - description: Offset for pagination
        in: query
        name: offset
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: List of adverts
          schema:
            items:
              $ref: '#/definitions/dto.AdvertResponse'
            type: array
        "400":
          description: Invalid limit or offset
          schema:
            $ref: '#/definitions/utils.ErrResponse'
        "500":
          description: Failed to retrieve adverts
          schema:
            $ref: '#/definitions/utils.ErrResponse'
      summary: Retrieve all adverts
      tags:
      - adverts
    post:
      consumes:
      - application/json
      description: Add a new advert to the system
      parameters:
      - description: Advert data
        in: body
        name: advert
        required: true
        schema:
          $ref: '#/definitions/dto.AdvertRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Advert created
          schema:
            $ref: '#/definitions/dto.AdvertResponse'
        "400":
          description: Invalid advert data
          schema:
            $ref: '#/definitions/utils.ErrResponse'
        "500":
          description: Failed to create advert
          schema:
            $ref: '#/definitions/utils.ErrResponse'
      summary: Create a new advert
      tags:
      - adverts
  /api/v1/adverts/{advertId}:
    delete:
      description: Remove an advert from the system using its ID
      parameters:
      - description: Advert ID
        in: path
        name: advertId
        required: true
        type: string
      responses:
        "204":
          description: Advert deleted
        "400":
          description: Invalid advert ID
          schema:
            $ref: '#/definitions/utils.ErrResponse'
        "404":
          description: Advert not found
          schema:
            $ref: '#/definitions/utils.ErrResponse'
        "500":
          description: Failed to delete advert
          schema:
            $ref: '#/definitions/utils.ErrResponse'
      summary: Delete an advert by ID
      tags:
      - adverts
    get:
      description: Fetch an advert based on its ID
      parameters:
      - description: Advert ID
        in: path
        name: advertId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Advert details
          schema:
            $ref: '#/definitions/dto.AdvertResponse'
        "400":
          description: Invalid advert ID
          schema:
            $ref: '#/definitions/utils.ErrResponse'
        "404":
          description: Advert not found
          schema:
            $ref: '#/definitions/utils.ErrResponse'
        "500":
          description: Failed to retrieve advert by ID
          schema:
            $ref: '#/definitions/utils.ErrResponse'
      summary: Retrieve an advert by ID
      tags:
      - adverts
    put:
      consumes:
      - application/json
      description: Modify the details of an existing advert
      parameters:
      - description: Advert ID
        in: path
        name: advertId
        required: true
        type: string
      - description: Updated advert data
        in: body
        name: advert
        required: true
        schema:
          $ref: '#/definitions/dto.AdvertRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Advert updated successfully
        "400":
          description: Invalid advert data
          schema:
            $ref: '#/definitions/utils.ErrResponse'
        "404":
          description: Advert not found
          schema:
            $ref: '#/definitions/utils.ErrResponse'
        "500":
          description: Failed to update advert
          schema:
            $ref: '#/definitions/utils.ErrResponse'
      summary: Update an existing advert
      tags:
      - adverts
  /api/v1/adverts/{advertId}/image:
    put:
      description: Upload an image associated with an advert by its ID
      parameters:
      - description: Advert ID
        in: path
        name: advertId
        required: true
        type: string
      - description: Image file to upload
        in: formData
        name: image
        required: true
        type: file
      responses:
        "200":
          description: Image uploaded
          schema:
            type: string
        "400":
          description: Invalid advert ID or file not attached
          schema:
            $ref: '#/definitions/utils.ErrResponse'
        "500":
          description: Failed to upload image
          schema:
            $ref: '#/definitions/utils.ErrResponse'
      summary: Upload an image for an advert
      tags:
      - adverts
  /api/v1/adverts/{advertId}/status:
    put:
      description: Change the status of an advert by its ID
      parameters:
      - description: Advert ID
        in: path
        name: advertId
        required: true
        type: string
      - description: New status
        in: body
        name: status
        required: true
        schema:
          type: string
      responses:
        "200":
          description: Advert status updated
        "400":
          description: Invalid advert ID or status
          schema:
            $ref: '#/definitions/utils.ErrResponse'
        "404":
          description: Advert not found
          schema:
            $ref: '#/definitions/utils.ErrResponse'
        "500":
          description: Failed to update advert status
          schema:
            $ref: '#/definitions/utils.ErrResponse'
      summary: Update the status of an advert
      tags:
      - adverts
  /api/v1/adverts/cart/{cartId}:
    get:
      description: Fetch a list of adverts in the specified cart
      parameters:
      - description: Cart ID
        in: path
        name: cartId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: List of adverts in cart
          schema:
            items:
              $ref: '#/definitions/dto.AdvertResponse'
            type: array
        "400":
          description: Invalid cart ID
          schema:
            $ref: '#/definitions/utils.ErrResponse'
        "500":
          description: Failed to retrieve adverts by cart ID
          schema:
            $ref: '#/definitions/utils.ErrResponse'
      summary: Retrieve adverts by cart ID
      tags:
      - adverts
  /api/v1/adverts/category/{categoryId}:
    get:
      description: Fetch a list of adverts associated with a specific category ID
      parameters:
      - description: Category ID
        in: path
        name: categoryId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: List of adverts by category ID
          schema:
            items:
              $ref: '#/definitions/dto.AdvertResponse'
            type: array
        "400":
          description: Invalid category ID
          schema:
            $ref: '#/definitions/utils.ErrResponse'
        "500":
          description: Failed to retrieve adverts by category ID
          schema:
            $ref: '#/definitions/utils.ErrResponse'
      summary: Retrieve adverts by category ID
      tags:
      - adverts
  /api/v1/adverts/seller/{sellerId}:
    get:
      description: Fetch a list of adverts associated with a specific seller ID
      parameters:
      - description: Seller ID
        in: path
        name: sellerId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: List of adverts
          schema:
            items:
              $ref: '#/definitions/dto.AdvertResponse'
            type: array
        "400":
          description: Invalid seller ID
          schema:
            $ref: '#/definitions/utils.ErrResponse'
        "500":
          description: Failed to retrieve adverts by seller ID
          schema:
            $ref: '#/definitions/utils.ErrResponse'
      summary: Retrieve adverts by seller ID
      tags:
      - adverts
  /api/v1/adverts/user/{userId}/saved:
    get:
      description: Fetch a list of saved adverts associated with a specific user ID
      parameters:
      - description: User ID
        in: path
        name: userId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: List of saved adverts
          schema:
            items:
              $ref: '#/definitions/dto.AdvertResponse'
            type: array
        "400":
          description: Invalid user ID
          schema:
            $ref: '#/definitions/utils.ErrResponse'
        "500":
          description: Failed to retrieve saved adverts by user ID
          schema:
            $ref: '#/definitions/utils.ErrResponse'
      summary: Retrieve saved adverts by user ID
      tags:
      - adverts
  /api/v1/categories:
    get:
      consumes:
      - application/json
      description: Retrieve a list of all categories
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/entity.Category'
            type: array
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.ErrResponse'
      summary: Get all categories
      tags:
      - categories
  /api/v1/files/{fileId}:
    get:
      description: Get a file by its ID
      parameters:
      - description: File ID
        in: path
        name: fileId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: URL of the static file
          schema:
            type: string
        "400":
          description: Invalid static ID
          schema:
            $ref: '#/definitions/utils.ErrResponse'
        "404":
          description: Static file not found
          schema:
            $ref: '#/definitions/utils.ErrResponse'
        "500":
          description: Failed to get static file
          schema:
            $ref: '#/definitions/utils.ErrResponse'
      summary: Get file by ID
      tags:
      - static
  /api/v1/login:
    post:
      consumes:
      - application/json
      description: Allows a user to log into the system
      parameters:
      - description: Login data
        in: body
        name: login
        required: true
        schema:
          $ref: '#/definitions/dto.Login'
      produces:
      - application/json
      responses:
        "200":
          description: SessionID
          schema:
            type: string
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/utils.ErrResponse'
        "401":
          description: Invalid credentials or unauthorized access
          schema:
            $ref: '#/definitions/utils.ErrResponse'
        "404":
          description: User not found
          schema:
            $ref: '#/definitions/utils.ErrResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/utils.ErrResponse'
      summary: User login
      tags:
      - Users
  /api/v1/logout:
    post:
      consumes:
      - application/json
      description: Allows the user to log out of the system by deleting their session
      produces:
      - application/json
      responses:
        "200":
          description: You have successfully logged out
          schema:
            type: string
        "400":
          description: Invalid request or missing cookie
          schema:
            $ref: '#/definitions/utils.ErrResponse'
        "401":
          description: Unauthorized access
          schema:
            $ref: '#/definitions/utils.ErrResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/utils.ErrResponse'
      summary: User logout
      tags:
      - Authentication
  /api/v1/me:
    get:
      consumes:
      - application/json
      description: Returns information about the currently authenticated user
      produces:
      - application/json
      responses:
        "200":
          description: User information
          schema:
            $ref: '#/definitions/dto.User'
        "401":
          description: Unauthorized access
          schema:
            $ref: '#/definitions/utils.ErrResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/utils.ErrResponse'
      summary: Get current user information
      tags:
      - Users
  /api/v1/password:
    post:
      consumes:
      - application/json
      description: Allows a user to change their password
      parameters:
      - description: Password change data
        in: body
        name: password
        required: true
        schema:
          $ref: '#/definitions/dto.UpdatePassword'
      produces:
      - application/json
      responses:
        "200":
          description: Password changed successfully
          schema:
            type: string
        "400":
          description: Invalid data
          schema:
            $ref: '#/definitions/utils.ErrResponse'
        "401":
          description: Unauthorized access
          schema:
            $ref: '#/definitions/utils.ErrResponse'
        "404":
          description: User not found
          schema:
            $ref: '#/definitions/utils.ErrResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/utils.ErrResponse'
      summary: Change user password
      tags:
      - Users
  /api/v1/profile:
    put:
      consumes:
      - application/json
      description: Allows a user to update their profile information
      parameters:
      - description: Profile data
        in: body
        name: profile
        required: true
        schema:
          $ref: '#/definitions/dto.User'
      produces:
      - application/json
      responses:
        "200":
          description: Profile updated successfully
          schema:
            type: string
        "400":
          description: Invalid data
          schema:
            $ref: '#/definitions/utils.ErrResponse'
        "401":
          description: Unauthorized access
          schema:
            $ref: '#/definitions/utils.ErrResponse'
        "404":
          description: User not found
          schema:
            $ref: '#/definitions/utils.ErrResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/utils.ErrResponse'
      summary: Update user profile
      tags:
      - Users
  /api/v1/profile/{user_id}:
    get:
      consumes:
      - application/json
      description: Returns user information by their ID
      parameters:
      - description: User ID
        in: path
        name: user_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: User profile
          schema:
            $ref: '#/definitions/dto.User'
        "404":
          description: User not found
          schema:
            $ref: '#/definitions/utils.ErrResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/utils.ErrResponse'
      summary: Get user profile
      tags:
      - Users
  /api/v1/purchase:
    post:
      consumes:
      - application/json
      description: Принимает ID корзины и выполняет процесс покупки
      parameters:
      - description: Purchase request
        in: body
        name: purchase
        required: true
        schema:
          $ref: '#/definitions/dto.PurchaseRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Successful purchase
          schema:
            $ref: '#/definitions/dto.PurchaseResponse'
        "400":
          description: Invalid request parameters
          schema:
            $ref: '#/definitions/utils.ErrResponse'
        "404":
          description: Cart not found
          schema:
            $ref: '#/definitions/utils.ErrResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/utils.ErrResponse'
      summary: Совершает покупку по ID корзины
      tags:
      - Покупки
  /api/v1/seller/{seller_id}:
    get:
      consumes:
      - application/json
      description: Возвращает информацию о продавце по его ID
      parameters:
      - description: ID продавца
        in: path
        name: seller_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Информация о продавце
          schema:
            $ref: '#/definitions/entity.Seller'
        "400":
          description: Некорректный запрос
          schema:
            $ref: '#/definitions/utils.ErrResponse'
        "404":
          description: Продавец не найден
          schema:
            $ref: '#/definitions/utils.ErrResponse'
        "500":
          description: Внутренняя ошибка сервера
          schema:
            $ref: '#/definitions/utils.ErrResponse'
      summary: Получение продавца по ID
      tags:
      - Продавцы
  /api/v1/signup:
    post:
      consumes:
      - application/json
      description: Creates a new user in the system
      parameters:
      - description: Registration data
        in: body
        name: signup
        required: true
        schema:
          $ref: '#/definitions/dto.Signup'
      produces:
      - application/json
      responses:
        "200":
          description: SessionID
          schema:
            type: string
        "400":
          description: Invalid request or user already exists
          schema:
            $ref: '#/definitions/utils.ErrResponse'
        "401":
          description: Unauthorized request
          schema:
            $ref: '#/definitions/utils.ErrResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/utils.ErrResponse'
      summary: User registration
      tags:
      - Users
  /api/v1/user/{user_id}/image:
    put:
      description: Upload an image associated with an advert by its ID
      parameters:
      - description: User ID
        in: path
        name: user_id
        required: true
        type: string
      - description: Image file to upload
        in: formData
        name: image
        required: true
        type: file
      responses:
        "200":
          description: Image uploaded
          schema:
            type: string
        "400":
          description: Invalid user ID or file not attached
          schema:
            $ref: '#/definitions/utils.ErrResponse'
        "500":
          description: Failed to upload image
          schema:
            $ref: '#/definitions/utils.ErrResponse'
      summary: Upload an image for an advert
      tags:
      - adverts
swagger: "2.0"
