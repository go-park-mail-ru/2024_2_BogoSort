definitions:
<<<<<<< HEAD
  dto.Advert:
=======
  dto.Login:
>>>>>>> TP-09_data_base
    properties:
      category_id:
        type: string
      description:
        type: string
<<<<<<< HEAD
      has_delivery:
        type: boolean
      id:
        type: string
      image_url:
        type: string
      location:
        type: string
      price:
        type: integer
      seller_id:
        type: string
      status:
        $ref: '#/definitions/dto.AdvertStatus'
      title:
        type: string
    type: object
  dto.AdvertStatus:
    enum:
    - active
    type: string
    x-enum-varnames:
    - AdvertStatusActive
=======
    type: object
  dto.Signup:
    properties:
      email:
        type: string
      password:
        type: string
    type: object
  dto.UpdatePassword:
    properties:
      new_password:
        type: string
      old_password:
        type: string
    type: object
  dto.User:
    properties:
      avatar_id:
        type: string
      email:
        type: string
      id:
        type: string
      phone:
        type: string
      status:
        default: active
        type: string
      username:
        type: string
    type: object
>>>>>>> TP-09_data_base
  utils.ErrResponse:
    properties:
      code:
        type: integer
      status:
        type: string
    type: object
info:
  contact: {}
  title: API
  version: 1.0.0
paths:
<<<<<<< HEAD
  /api/v1/adverts:
    get:
      description: Get a list of all adverts
      parameters:
      - description: Limit the number of results
        in: query
        name: limit
        type: integer
      - description: Offset for pagination
        in: query
        name: offset
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: List of adverts
          schema:
            items:
              $ref: '#/definitions/dto.Advert'
            type: array
        "400":
          description: Invalid limit or offset
          schema:
            $ref: '#/definitions/utils.ErrResponse'
        "500":
          description: Failed to get adverts
          schema:
            $ref: '#/definitions/utils.ErrResponse'
      summary: Get all adverts
      tags:
      - adverts
    post:
      consumes:
      - application/json
      description: Create a new advert
      parameters:
      - description: Advert data
        in: body
        name: advert
        required: true
        schema:
          $ref: '#/definitions/dto.Advert'
      produces:
      - application/json
      responses:
        "201":
          description: Advert created
          schema:
            $ref: '#/definitions/dto.Advert'
        "400":
          description: Invalid advert data
          schema:
            $ref: '#/definitions/utils.ErrResponse'
        "500":
          description: Failed to add advert
          schema:
            $ref: '#/definitions/utils.ErrResponse'
      summary: Add a new advert
      tags:
      - adverts
  /api/v1/adverts/{advertId}:
    delete:
      description: Delete an advert by its ID
      parameters:
      - description: Advert ID
        in: path
        name: advertId
        required: true
        type: string
      responses:
        "204":
          description: Advert deleted
        "400":
          description: Invalid advert ID
          schema:
            $ref: '#/definitions/utils.ErrResponse'
        "404":
          description: Advert not found
          schema:
            $ref: '#/definitions/utils.ErrResponse'
        "500":
          description: Failed to delete advert
          schema:
            $ref: '#/definitions/utils.ErrResponse'
      summary: Delete an advert by ID
      tags:
      - adverts
    get:
      description: Get an advert by its ID
      parameters:
      - description: Advert ID
        in: path
        name: advertId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Advert details
          schema:
            $ref: '#/definitions/dto.Advert'
        "400":
          description: Invalid advert ID
          schema:
            $ref: '#/definitions/utils.ErrResponse'
        "404":
          description: Advert not found
          schema:
            $ref: '#/definitions/utils.ErrResponse'
        "500":
          description: Failed to get advert by ID
          schema:
            $ref: '#/definitions/utils.ErrResponse'
      summary: Get an advert by ID
      tags:
      - adverts
    put:
      consumes:
      - application/json
      description: Update an advert's information
      parameters:
      - description: Advert ID
        in: path
        name: advertId
        required: true
        type: string
      - description: Updated advert data
        in: body
        name: advert
        required: true
        schema:
          $ref: '#/definitions/dto.Advert'
      produces:
      - application/json
      responses:
        "200":
          description: Advert updated successfully
        "400":
          description: Invalid advert data
          schema:
            $ref: '#/definitions/utils.ErrResponse'
        "404":
          description: Advert not found
          schema:
            $ref: '#/definitions/utils.ErrResponse'
        "500":
          description: Failed to update advert
          schema:
            $ref: '#/definitions/utils.ErrResponse'
      summary: Update an existing advert
      tags:
      - adverts
  /api/v1/adverts/{advertId}/image:
    put:
      description: Upload an image by ID
      parameters:
      - description: Advert ID
        in: path
        name: advertId
        required: true
        type: string
      - description: Image file to upload
        in: formData
        name: image
        required: true
        type: file
      responses:
        "200":
          description: Image uploaded
          schema:
            type: string
        "400":
          description: Invalid advert ID or file not attached
          schema:
            $ref: '#/definitions/utils.ErrResponse'
        "500":
          description: Failed to upload image
          schema:
            $ref: '#/definitions/utils.ErrResponse'
      summary: Upload an image
      tags:
      - adverts
  /api/v1/adverts/{advertId}/status:
    put:
      description: Update advert status by ID
      parameters:
      - description: Advert ID
        in: path
        name: advertId
        required: true
        type: string
      - description: New status
        in: body
        name: status
        required: true
        schema:
          type: string
      responses:
        "200":
          description: Advert status updated
        "400":
          description: Invalid advert ID or status
          schema:
            $ref: '#/definitions/utils.ErrResponse'
        "404":
          description: Advert not found
          schema:
            $ref: '#/definitions/utils.ErrResponse'
        "500":
          description: Failed to update advert status
          schema:
            $ref: '#/definitions/utils.ErrResponse'
      summary: Update advert status
      tags:
      - adverts
  /api/v1/adverts/cart/{cartId}:
    get:
      description: Get a list of adverts in the specified cart
      parameters:
      - description: Cart ID
        in: path
        name: cartId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: List of adverts in cart
          schema:
            items:
              $ref: '#/definitions/dto.Advert'
            type: array
        "400":
          description: Invalid cart ID
          schema:
            $ref: '#/definitions/utils.ErrResponse'
        "500":
          description: Failed to get adverts by cart ID
          schema:
            $ref: '#/definitions/utils.ErrResponse'
      summary: Get adverts by cart ID
      tags:
      - adverts
  /api/v1/adverts/category/{categoryId}:
    get:
      description: Get a list of adverts by category ID
      parameters:
      - description: Category ID
        in: path
        name: categoryId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: List of adverts by category ID
          schema:
            items:
              $ref: '#/definitions/dto.Advert'
            type: array
        "400":
          description: Invalid category ID
          schema:
            $ref: '#/definitions/utils.ErrResponse'
        "500":
          description: Failed to get adverts by category ID
          schema:
            $ref: '#/definitions/utils.ErrResponse'
      summary: Get adverts by category ID
      tags:
      - adverts
  /api/v1/adverts/seller/{sellerId}:
    get:
      description: Get a list of adverts by seller ID
      parameters:
      - description: Seller ID
        in: path
        name: sellerId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: List of adverts
          schema:
            items:
              $ref: '#/definitions/dto.Advert'
            type: array
        "400":
          description: Invalid seller ID
          schema:
            $ref: '#/definitions/utils.ErrResponse'
        "500":
          description: Failed to get adverts by seller ID
          schema:
            $ref: '#/definitions/utils.ErrResponse'
      summary: Get adverts by seller ID
      tags:
      - adverts
  /api/v1/adverts/user/{userId}/saved:
    get:
      description: Get a list of saved adverts by user ID
      parameters:
      - description: User ID
        in: path
        name: userId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: List of saved adverts
          schema:
            items:
              $ref: '#/definitions/dto.Advert'
            type: array
        "400":
          description: Invalid user ID
          schema:
            $ref: '#/definitions/utils.ErrResponse'
        "500":
          description: Failed to get saved adverts by user ID
          schema:
            $ref: '#/definitions/utils.ErrResponse'
      summary: Get saved adverts by user ID
      tags:
      - adverts
  /api/v1/static/{staticId}:
    get:
      description: Get a static file by its ID
      parameters:
      - description: Static file ID
        in: path
        name: staticId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: URL of the static file
          schema:
            type: string
        "400":
          description: Invalid static ID
          schema:
            $ref: '#/definitions/utils.ErrResponse'
        "404":
          description: Static file not found
          schema:
            $ref: '#/definitions/utils.ErrResponse'
        "500":
          description: Failed to get static file
          schema:
            $ref: '#/definitions/utils.ErrResponse'
      summary: Get static file by ID
      tags:
      - static
=======
  /login:
    post:
      consumes:
      - application/json
      description: Позволяет пользователю войти в систему
      parameters:
      - description: Данные для входа
        in: body
        name: login
        required: true
        schema:
          $ref: '#/definitions/dto.Login'
      produces:
      - application/json
      responses:
        "200":
          description: SessionID
          schema:
            type: string
        "400":
          description: Некорректный запрос
          schema:
            $ref: '#/definitions/utils.ErrResponse'
        "401":
          description: Неверные учетные данные или несанкционированный доступ
          schema:
            $ref: '#/definitions/utils.ErrResponse'
        "404":
          description: Пользователь не найден
          schema:
            $ref: '#/definitions/utils.ErrResponse'
        "500":
          description: Внутренняя ошибка сервера
          schema:
            $ref: '#/definitions/utils.ErrResponse'
      summary: Вход пользователя
      tags:
      - Пользователи
  /logout:
    post:
      consumes:
      - application/json
      description: Позволяет пользователю выйти из системы, удаляя его сессию
      produces:
      - application/json
      responses:
        "200":
          description: Вы успешно вышли из системы
          schema:
            type: string
        "400":
          description: Некорректный запрос или отсутствие cookie
          schema:
            $ref: '#/definitions/utils.ErrResponse'
        "401":
          description: Несанкционированный доступ
          schema:
            $ref: '#/definitions/utils.ErrResponse'
        "500":
          description: Внутренняя ошибка сервера
          schema:
            $ref: '#/definitions/utils.ErrResponse'
      summary: Выход пользователя
      tags:
      - Аутентификация
  /me:
    get:
      consumes:
      - application/json
      description: Возвращает информацию о пользователе, текущий пользователь которого
        аутентифицирован
      produces:
      - application/json
      responses:
        "200":
          description: Информация о пользователе
          schema:
            $ref: '#/definitions/dto.User'
        "401":
          description: Несанкционированный доступ
          schema:
            $ref: '#/definitions/utils.ErrResponse'
        "500":
          description: Внутренняя ошибка сервера
          schema:
            $ref: '#/definitions/utils.ErrResponse'
      summary: Получение информации о текущем пользователе
      tags:
      - Пользователи
  /password:
    post:
      consumes:
      - application/json
      description: Позволяет пользователю изменить свой пароль
      parameters:
      - description: Данные для изменения пароля
        in: body
        name: password
        required: true
        schema:
          $ref: '#/definitions/dto.UpdatePassword'
      produces:
      - application/json
      responses:
        "200":
          description: Пароль изменен успешно
          schema:
            type: string
        "400":
          description: Некорректные данные
          schema:
            $ref: '#/definitions/utils.ErrResponse'
        "401":
          description: Несанкционированный доступ
          schema:
            $ref: '#/definitions/utils.ErrResponse'
        "404":
          description: Пользователь не найден
          schema:
            $ref: '#/definitions/utils.ErrResponse'
        "500":
          description: Внутренняя ошибка сервера
          schema:
            $ref: '#/definitions/utils.ErrResponse'
      summary: Изменение пароля пользователя
      tags:
      - Пользователи
  /profile:
    put:
      consumes:
      - application/json
      description: Позволяет пользователю обновить информацию своего профиля
      parameters:
      - description: Данные профиля
        in: body
        name: profile
        required: true
        schema:
          $ref: '#/definitions/dto.User'
      produces:
      - application/json
      responses:
        "200":
          description: Профиль обновлен успешно
          schema:
            type: string
        "400":
          description: Некорректные данные
          schema:
            $ref: '#/definitions/utils.ErrResponse'
        "401":
          description: Несанкционированный доступ
          schema:
            $ref: '#/definitions/utils.ErrResponse'
        "404":
          description: Пользователь не найден
          schema:
            $ref: '#/definitions/utils.ErrResponse'
        "500":
          description: Внутренняя ошибка сервера
          schema:
            $ref: '#/definitions/utils.ErrResponse'
      summary: Обновление профиля пользователя
      tags:
      - Пользователи
  /profile/{user_id}:
    get:
      consumes:
      - application/json
      description: Возвращает информацию о пользователе по его ID
      parameters:
      - description: ID пользователя
        in: path
        name: user_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Профиль пользователя
          schema:
            $ref: '#/definitions/dto.User'
        "404":
          description: Пользователь не найден
          schema:
            $ref: '#/definitions/utils.ErrResponse'
        "500":
          description: Внутренняя ошибка сервера
          schema:
            $ref: '#/definitions/utils.ErrResponse'
      summary: Получение профиля пользователя
      tags:
      - Пользователи
  /signup:
    post:
      consumes:
      - application/json
      description: Создает нового пользователя в системе
      parameters:
      - description: Данные для регистрации
        in: body
        name: signup
        required: true
        schema:
          $ref: '#/definitions/dto.Signup'
      produces:
      - application/json
      responses:
        "200":
          description: SessionID
          schema:
            type: string
        "400":
          description: Некорректный запрос или пользователь уже существует
          schema:
            $ref: '#/definitions/utils.ErrResponse'
        "401":
          description: Несанкционированный запрос
          schema:
            $ref: '#/definitions/utils.ErrResponse'
        "500":
          description: Внутренняя ошибка сервера
          schema:
            $ref: '#/definitions/utils.ErrResponse'
      summary: Регистрация нового пользователя
      tags:
      - Пользователи
>>>>>>> TP-09_data_base
swagger: "2.0"
