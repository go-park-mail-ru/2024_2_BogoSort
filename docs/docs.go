// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/api/v1/adverts": {
            "get": {
                "description": "Fetch a list of all adverts with optional pagination.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "adverts"
                ],
                "summary": "Retrieve all adverts",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Limit the number of results",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Offset for pagination",
                        "name": "offset",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of adverts",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/dto.PreviewAdvertCard"
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid limit or offset",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrResponse"
                        }
                    },
                    "500": {
                        "description": "Failed to retrieve adverts",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrResponse"
                        }
                    }
                }
            },
            "post": {
                "description": "Add a new advert to the system.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "adverts"
                ],
                "summary": "Create a new advert",
                "parameters": [
                    {
                        "description": "Advert data",
                        "name": "advert",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.AdvertRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Advert created",
                        "schema": {
                            "$ref": "#/definitions/dto.Advert"
                        }
                    },
                    "400": {
                        "description": "Invalid advert data",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrResponse"
                        }
                    },
                    "500": {
                        "description": "Failed to create advert",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/adverts/cart/{cartId}": {
            "get": {
                "description": "Fetch a list of adverts in the specified cart.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "adverts"
                ],
                "summary": "Retrieve adverts by cart ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Cart ID",
                        "name": "cartId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of adverts in cart",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/dto.PreviewAdvertCard"
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid cart ID",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrResponse"
                        }
                    },
                    "500": {
                        "description": "Failed to retrieve adverts by cart ID",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/adverts/category/{categoryId}": {
            "get": {
                "description": "Fetch a list of adverts associated with a specific category ID.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "adverts"
                ],
                "summary": "Retrieve adverts by category ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Category ID",
                        "name": "categoryId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of adverts by category ID",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/dto.PreviewAdvertCard"
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid category ID",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrResponse"
                        }
                    },
                    "500": {
                        "description": "Failed to retrieve adverts by category ID",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/adverts/my": {
            "get": {
                "description": "Fetch a list of adverts associated with a specific user ID.",
                "tags": [
                    "adverts"
                ],
                "summary": "Retrieve adverts by user ID",
                "responses": {
                    "200": {
                        "description": "List of adverts by user ID",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/dto.MyPreviewAdvertCard"
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid user ID",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrResponse"
                        }
                    },
                    "500": {
                        "description": "Failed to retrieve adverts by user ID",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/adverts/saved": {
            "get": {
                "description": "Fetch a list of adverts saved by the specified user ID.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "adverts"
                ],
                "summary": "Retrieve adverts by user ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "User ID",
                        "name": "userId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of adverts saved by user",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/dto.PreviewAdvertCard"
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid user ID",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrResponse"
                        }
                    },
                    "500": {
                        "description": "Failed to retrieve adverts by user ID",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/adverts/saved/{advertId}": {
            "post": {
                "description": "Add an advert to saved by its ID.",
                "tags": [
                    "adverts"
                ],
                "summary": "Add an advert to saved",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Advert ID",
                        "name": "advertId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Advert added to saved"
                    },
                    "400": {
                        "description": "Invalid advert ID",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrResponse"
                        }
                    },
                    "404": {
                        "description": "Advert not found",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrResponse"
                        }
                    },
                    "500": {
                        "description": "Failed to add advert to saved",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrResponse"
                        }
                    }
                }
            },
            "delete": {
                "description": "Remove an advert from saved by its ID.",
                "tags": [
                    "adverts"
                ],
                "summary": "Remove an advert from saved",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Advert ID",
                        "name": "advertId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Advert removed from saved"
                    },
                    "400": {
                        "description": "Invalid advert ID",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrResponse"
                        }
                    },
                    "404": {
                        "description": "Advert not found",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrResponse"
                        }
                    },
                    "500": {
                        "description": "Failed to remove advert from saved",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/adverts/search": {
            "get": {
                "description": "Выполняет поиск объявлений по строке запроса с разбивкой на батчи.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "adverts"
                ],
                "summary": "Поиск объявлений",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Строка поиска",
                        "name": "query",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Лимит результатов (по умолчанию 100)",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Смещение для пагинации (по умолчанию 0)",
                        "name": "offset",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Список найденных объявлений",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/dto.PreviewAdvertCard"
                            }
                        }
                    },
                    "400": {
                        "description": "Неверные параметры запроса",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrResponse"
                        }
                    },
                    "500": {
                        "description": "Ошибка сервера",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/adverts/seller/{sellerId}": {
            "get": {
                "description": "Fetch a list of adverts associated with a specific seller ID.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "adverts"
                ],
                "summary": "Retrieve adverts by seller ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Seller ID",
                        "name": "sellerId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of adverts",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/dto.PreviewAdvertCard"
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid seller ID",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrResponse"
                        }
                    },
                    "500": {
                        "description": "Failed to retrieve adverts by seller ID",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/adverts/{advertId}": {
            "get": {
                "description": "Fetch an advert based on its ID.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "adverts"
                ],
                "summary": "Retrieve an advert by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Advert ID",
                        "name": "advertId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Advert details",
                        "schema": {
                            "$ref": "#/definitions/dto.AdvertCard"
                        }
                    },
                    "400": {
                        "description": "Invalid advert ID",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrResponse"
                        }
                    },
                    "404": {
                        "description": "Advert not found",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrResponse"
                        }
                    },
                    "500": {
                        "description": "Failed to retrieve advert by ID",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrResponse"
                        }
                    }
                }
            },
            "put": {
                "description": "Modify the details of an existing advert.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "adverts"
                ],
                "summary": "Update an existing advert",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Advert ID",
                        "name": "advertId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Updated advert data",
                        "name": "advert",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.AdvertRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Advert updated successfully",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Invalid advert data",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrResponse"
                        }
                    },
                    "404": {
                        "description": "Advert not found",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrResponse"
                        }
                    },
                    "500": {
                        "description": "Failed to update advert",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrResponse"
                        }
                    }
                }
            },
            "delete": {
                "description": "Remove an advert from the system using its ID.",
                "tags": [
                    "adverts"
                ],
                "summary": "Delete an advert by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Advert ID",
                        "name": "advertId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Advert deleted"
                    },
                    "400": {
                        "description": "Invalid advert ID",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrResponse"
                        }
                    },
                    "404": {
                        "description": "Advert not found",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrResponse"
                        }
                    },
                    "500": {
                        "description": "Failed to delete advert",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/adverts/{advertId}/image": {
            "put": {
                "description": "Upload an image associated with an advert by its ID.",
                "tags": [
                    "adverts"
                ],
                "summary": "Upload an image for an advert",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Advert ID",
                        "name": "advertId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "file",
                        "description": "Image file to upload",
                        "name": "image",
                        "in": "formData",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Image uploaded",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Invalid advert ID or file not attached",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrResponse"
                        }
                    },
                    "500": {
                        "description": "Failed to upload image",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/adverts/{advertId}/status": {
            "put": {
                "description": "Change the status of an advert by its ID.",
                "tags": [
                    "adverts"
                ],
                "summary": "Update the status of an advert",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Advert ID",
                        "name": "advertId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "New status",
                        "name": "status",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Advert status updated"
                    },
                    "400": {
                        "description": "Invalid advert ID or status",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrResponse"
                        }
                    },
                    "404": {
                        "description": "Advert not found",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrResponse"
                        }
                    },
                    "500": {
                        "description": "Failed to update advert status",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/cart/add": {
            "post": {
                "description": "Adds an advertisement to a user's cart",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Cart"
                ],
                "summary": "Add item to cart",
                "parameters": [
                    {
                        "description": "Add to cart request containing user_id and advert_id",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.AddAdvertToUserCartRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully added item to cart",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid request body",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrResponse"
                        }
                    },
                    "404": {
                        "description": "Cart not found",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/cart/delete": {
            "delete": {
                "description": "Removes an advertisement from a user's cart",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Cart"
                ],
                "summary": "Remove item from cart",
                "parameters": [
                    {
                        "description": "Delete from cart request containing cart_id and advert_id",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.DeleteAdvertFromUserCartRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully removed item from cart",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid request body",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrResponse"
                        }
                    },
                    "404": {
                        "description": "Cart or item not found",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/cart/exists/{user_id}": {
            "get": {
                "description": "Checks if a cart exists for a specific user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Cart"
                ],
                "summary": "Check cart existence",
                "parameters": [
                    {
                        "type": "string",
                        "description": "User ID (UUID format)",
                        "name": "user_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Cart existence status with cart_id if exists",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid user ID format or missing user_id",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/cart/user/{user_id}": {
            "get": {
                "description": "Retrieves a cart associated with a specific user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Cart"
                ],
                "summary": "Get cart by user ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "User ID (UUID format)",
                        "name": "user_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Cart details successfully retrieved",
                        "schema": {
                            "$ref": "#/definitions/dto.CartResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid user ID format or missing user_id",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrResponse"
                        }
                    },
                    "404": {
                        "description": "Cart not found for user",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/cart/{cart_id}": {
            "get": {
                "description": "Retrieves a cart by its unique identifier",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Cart"
                ],
                "summary": "Get cart by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Cart ID (UUID format)",
                        "name": "cart_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Cart details successfully retrieved",
                        "schema": {
                            "$ref": "#/definitions/dto.CartResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid cart ID format or missing cart_id",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrResponse"
                        }
                    },
                    "404": {
                        "description": "Cart not found",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/categories": {
            "get": {
                "description": "Retrieve a list of all categories",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "categories"
                ],
                "summary": "Get all categories",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/entity.Category"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/csrf-token": {
            "get": {
                "description": "This endpoint checks for a session ID in the request cookies and retrieves the user ID from the session manager. If both are valid, it generates a CSRF token using the session ID and user ID, and sends it back in the response header. If any step fails, it responds with an appropriate error message.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "CSRF"
                ],
                "summary": "Retrieve CSRF Token",
                "responses": {
                    "200": {
                        "description": "CSRF Token",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrResponse"
                        }
                    },
                    "500": {
                        "description": "Failed to create CSRF token",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/files/stream/{fileId}": {
            "get": {
                "description": "Get a static file as a byte stream by its ID",
                "produces": [
                    "application/octet-stream"
                ],
                "tags": [
                    "static"
                ],
                "summary": "Get static file stream by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "File ID",
                        "name": "fileId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Static file content",
                        "schema": {
                            "type": "binary"
                        }
                    },
                    "400": {
                        "description": "Invalid file ID",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrResponse"
                        }
                    },
                    "404": {
                        "description": "Static file not found",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrResponse"
                        }
                    },
                    "500": {
                        "description": "Failed to get static file",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/files/{fileId}": {
            "get": {
                "description": "Get a file by its ID",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "static"
                ],
                "summary": "Get file by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "File ID",
                        "name": "fileId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "URL of the static file",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Invalid static ID",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrResponse"
                        }
                    },
                    "404": {
                        "description": "Static file not found",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrResponse"
                        }
                    },
                    "500": {
                        "description": "Failed to get static file",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/history/{advert_id}": {
            "get": {
                "description": "Получает историю изменения цены для указанного объявления",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "History"
                ],
                "summary": "Get Advert Price History",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Advert ID",
                        "name": "advert_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/dto.PriceHistoryResponse"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/login": {
            "post": {
                "description": "Allows a user to log into the system",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Users"
                ],
                "summary": "User login",
                "parameters": [
                    {
                        "description": "Login data",
                        "name": "login",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.Login"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "SessionID",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrResponse"
                        }
                    },
                    "401": {
                        "description": "Invalid credentials or unauthorized access",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrResponse"
                        }
                    },
                    "404": {
                        "description": "User not found",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/logout": {
            "post": {
                "description": "Allows the user to log out of the system by deleting their session",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Authentication"
                ],
                "summary": "User logout",
                "responses": {
                    "200": {
                        "description": "You have successfully logged out",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Invalid request or missing cookie",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized access",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/me": {
            "get": {
                "description": "Returns information about the currently authenticated user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Users"
                ],
                "summary": "Get current user information",
                "responses": {
                    "200": {
                        "description": "User information",
                        "schema": {
                            "$ref": "#/definitions/dto.User"
                        }
                    },
                    "401": {
                        "description": "Unauthorized access",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/password": {
            "post": {
                "description": "Allows a user to change their password",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Users"
                ],
                "summary": "Change user password",
                "parameters": [
                    {
                        "description": "Password change data",
                        "name": "password",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.UpdatePassword"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Password changed successfully",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Invalid data",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized access",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrResponse"
                        }
                    },
                    "404": {
                        "description": "User not found",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/payment/init": {
            "post": {
                "description": "Initiates a payment process for a given item ID.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "payment"
                ],
                "summary": "Initialize payment",
                "parameters": [
                    {
                        "description": "Payment Request",
                        "name": "paymentRequest",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/http.PaymentRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Payment URL",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid request body or Payment service error",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Payment service error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/api/v1/profile": {
            "put": {
                "description": "Allows a user to update their profile information",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Users"
                ],
                "summary": "Update user profile",
                "parameters": [
                    {
                        "description": "Profile data",
                        "name": "profile",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.UserUpdate"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Profile updated successfully",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Invalid data",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized access",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrResponse"
                        }
                    },
                    "404": {
                        "description": "User not found",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/profile/{user_id}": {
            "get": {
                "description": "Returns user information by their ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Users"
                ],
                "summary": "Get user profile",
                "parameters": [
                    {
                        "type": "string",
                        "description": "User ID",
                        "name": "user_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "User profile",
                        "schema": {
                            "$ref": "#/definitions/dto.User"
                        }
                    },
                    "404": {
                        "description": "User not found",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/purchase/{user_id}": {
            "get": {
                "description": "Retrieves all purchases associated with a specific user ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Purchases"
                ],
                "summary": "Get user purchases",
                "parameters": [
                    {
                        "type": "string",
                        "format": "uuid",
                        "description": "User ID",
                        "name": "user_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of user purchases",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/dto.PurchaseResponse"
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid user ID",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrResponse"
                        }
                    }
                }
            },
            "post": {
                "description": "Creates a new purchase record for a user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Purchases"
                ],
                "summary": "Create new purchase",
                "parameters": [
                    {
                        "type": "string",
                        "format": "uuid",
                        "description": "User ID",
                        "name": "user_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Purchase details",
                        "name": "purchase",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.PurchaseRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Purchase created successfully",
                        "schema": {
                            "$ref": "#/definitions/dto.PurchaseResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request parameters or user ID",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/seller/user/{user_id}": {
            "get": {
                "description": "Возвращает информацию о продавце, связанном с указанным ID пользователя",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Продавцы"
                ],
                "summary": "Получить продавца по ID пользователя",
                "parameters": [
                    {
                        "type": "string",
                        "description": "ID пользователя",
                        "name": "user_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Информация о продавце",
                        "schema": {
                            "$ref": "#/definitions/entity.Seller"
                        }
                    },
                    "400": {
                        "description": "Некорректный ID пользователя",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrResponse"
                        }
                    },
                    "404": {
                        "description": "Продавец не найден",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrResponse"
                        }
                    },
                    "500": {
                        "description": "Внутренняя ошибка сервера",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/seller/{seller_id}": {
            "get": {
                "description": "Возвращает информацию о продавце по его ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Продавцы"
                ],
                "summary": "Получение продавца по ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "ID продавца",
                        "name": "seller_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Информация о продавце",
                        "schema": {
                            "$ref": "#/definitions/entity.Seller"
                        }
                    },
                    "400": {
                        "description": "Некорректный запрос",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrResponse"
                        }
                    },
                    "404": {
                        "description": "Продавец не найден",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrResponse"
                        }
                    },
                    "500": {
                        "description": "Внутренняя ошибка сервера",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/signup": {
            "post": {
                "description": "Creates a new user in the system",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Users"
                ],
                "summary": "User registration",
                "parameters": [
                    {
                        "description": "Registration data",
                        "name": "signup",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.Signup"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "SessionID",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Invalid request or user already exists",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized request",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/user/{user_id}/image": {
            "put": {
                "description": "Upload an image associated with an advert by its ID",
                "tags": [
                    "adverts"
                ],
                "summary": "Upload an image for an advert",
                "parameters": [
                    {
                        "type": "string",
                        "description": "User ID",
                        "name": "user_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "file",
                        "description": "Image file to upload",
                        "name": "image",
                        "in": "formData",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Image uploaded",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Invalid user ID or file not attached",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrResponse"
                        }
                    },
                    "500": {
                        "description": "Failed to upload image",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrResponse"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "dto.AddAdvertToUserCartRequest": {
            "type": "object",
            "properties": {
                "advert_id": {
                    "type": "string"
                },
                "user_id": {
                    "type": "string"
                }
            }
        },
        "dto.Advert": {
            "type": "object",
            "properties": {
                "category_id": {
                    "type": "string"
                },
                "created_at": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "has_delivery": {
                    "type": "boolean"
                },
                "id": {
                    "type": "string"
                },
                "image_id": {
                    "type": "string"
                },
                "location": {
                    "type": "string"
                },
                "price": {
                    "type": "integer"
                },
                "saves_number": {
                    "type": "integer"
                },
                "seller_id": {
                    "type": "string"
                },
                "status": {
                    "$ref": "#/definitions/dto.AdvertStatus"
                },
                "title": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                },
                "views_number": {
                    "type": "integer"
                }
            }
        },
        "dto.AdvertCard": {
            "type": "object",
            "properties": {
                "advert": {
                    "$ref": "#/definitions/dto.Advert"
                },
                "is_saved": {
                    "type": "boolean"
                },
                "is_viewed": {
                    "type": "boolean"
                }
            }
        },
        "dto.AdvertRequest": {
            "type": "object",
            "properties": {
                "category_id": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "has_delivery": {
                    "type": "boolean"
                },
                "location": {
                    "type": "string"
                },
                "price": {
                    "type": "integer"
                },
                "status": {
                    "$ref": "#/definitions/dto.AdvertStatus"
                },
                "title": {
                    "type": "string"
                }
            }
        },
        "dto.AdvertStatus": {
            "type": "string",
            "enum": [
                "active",
                "inactive",
                "reserved"
            ],
            "x-enum-varnames": [
                "AdvertStatusActive",
                "AdvertStatusInactive",
                "AdvertStatusReserved"
            ]
        },
        "dto.Cart": {
            "type": "object",
            "properties": {
                "cart_purchases": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/dto.CartPurchase"
                    }
                },
                "id": {
                    "type": "string"
                },
                "status": {
                    "$ref": "#/definitions/entity.CartStatus"
                },
                "user_id": {
                    "type": "string"
                }
            }
        },
        "dto.CartPurchase": {
            "type": "object",
            "properties": {
                "adverts": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/dto.PreviewAdvertCard"
                    }
                },
                "seller_id": {
                    "type": "string"
                }
            }
        },
        "dto.CartResponse": {
            "type": "object",
            "properties": {
                "cart": {
                    "$ref": "#/definitions/dto.Cart"
                }
            }
        },
        "dto.DeleteAdvertFromUserCartRequest": {
            "type": "object",
            "properties": {
                "advert_id": {
                    "type": "string"
                },
                "cart_id": {
                    "type": "string"
                }
            }
        },
        "dto.DeliveryMethod": {
            "type": "string",
            "enum": [
                "pickup",
                "delivery"
            ],
            "x-enum-varnames": [
                "DeliveryMethodPickup",
                "DeliveryMethodDelivery"
            ]
        },
        "dto.Login": {
            "type": "object",
            "properties": {
                "email": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                }
            }
        },
        "dto.MyPreviewAdvertCard": {
            "type": "object",
            "properties": {
                "preview": {
                    "$ref": "#/definitions/dto.PreviewAdvert"
                },
                "saves_number": {
                    "type": "integer"
                },
                "views_number": {
                    "type": "integer"
                }
            }
        },
        "dto.PaymentMethod": {
            "type": "string",
            "enum": [
                "card",
                "cash"
            ],
            "x-enum-varnames": [
                "PaymentMethodCard",
                "PaymentMethodCash"
            ]
        },
        "dto.PreviewAdvert": {
            "type": "object",
            "properties": {
                "category_id": {
                    "type": "string"
                },
                "has_delivery": {
                    "type": "boolean"
                },
                "id": {
                    "type": "string"
                },
                "image_id": {
                    "type": "string"
                },
                "location": {
                    "type": "string"
                },
                "price": {
                    "type": "integer"
                },
                "seller_id": {
                    "type": "string"
                },
                "status": {
                    "$ref": "#/definitions/dto.AdvertStatus"
                },
                "title": {
                    "type": "string"
                }
            }
        },
        "dto.PreviewAdvertCard": {
            "type": "object",
            "properties": {
                "is_saved": {
                    "type": "boolean"
                },
                "is_viewed": {
                    "type": "boolean"
                },
                "preview": {
                    "$ref": "#/definitions/dto.PreviewAdvert"
                }
            }
        },
        "dto.PriceHistoryResponse": {
            "type": "object",
            "properties": {
                "advert_history": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/entity.PriceHistory"
                    }
                },
                "advert_id": {
                    "type": "string"
                }
            }
        },
        "dto.PurchaseRequest": {
            "type": "object",
            "properties": {
                "address": {
                    "type": "string"
                },
                "cart_id": {
                    "type": "string"
                },
                "delivery_method": {
                    "$ref": "#/definitions/dto.DeliveryMethod"
                },
                "payment_method": {
                    "$ref": "#/definitions/dto.PaymentMethod"
                },
                "user_id": {
                    "type": "string"
                }
            }
        },
        "dto.PurchaseResponse": {
            "type": "object",
            "properties": {
                "address": {
                    "type": "string"
                },
                "adverts": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/dto.PreviewAdvertCard"
                    }
                },
                "customer_id": {
                    "type": "string"
                },
                "delivery_method": {
                    "$ref": "#/definitions/dto.DeliveryMethod"
                },
                "id": {
                    "type": "string"
                },
                "payment_method": {
                    "$ref": "#/definitions/dto.PaymentMethod"
                },
                "seller_id": {
                    "type": "string"
                },
                "status": {
                    "$ref": "#/definitions/dto.PurchaseStatus"
                }
            }
        },
        "dto.PurchaseStatus": {
            "type": "string",
            "enum": [
                "pending",
                "completed",
                "in_progress",
                "canceled"
            ],
            "x-enum-varnames": [
                "StatusPending",
                "StatusCompleted",
                "StatusFailed",
                "StatusCanceled"
            ]
        },
        "dto.Signup": {
            "type": "object",
            "properties": {
                "email": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                }
            }
        },
        "dto.UpdatePassword": {
            "type": "object",
            "properties": {
                "new_password": {
                    "type": "string"
                },
                "old_password": {
                    "type": "string"
                }
            }
        },
        "dto.User": {
            "type": "object",
            "properties": {
                "avatar_id": {
                    "type": "string",
                    "default": "00000000-0000-0000-0000-000000000000"
                },
                "created_at": {
                    "type": "string"
                },
                "email": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "phone": {
                    "type": "string"
                },
                "status": {
                    "type": "string",
                    "default": "active"
                },
                "updated_at": {
                    "type": "string"
                },
                "username": {
                    "type": "string"
                }
            }
        },
        "dto.UserUpdate": {
            "type": "object",
            "properties": {
                "email": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "phone": {
                    "type": "string"
                },
                "username": {
                    "type": "string"
                }
            }
        },
        "entity.CartStatus": {
            "type": "string",
            "enum": [
                "active",
                "inactive"
            ],
            "x-enum-varnames": [
                "CartStatusActive",
                "CartStatusInactive"
            ]
        },
        "entity.Category": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "string"
                },
                "title": {
                    "type": "string"
                }
            }
        },
        "entity.PriceHistory": {
            "type": "object",
            "properties": {
                "advertID": {
                    "type": "string"
                },
                "changedAt": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "newPrice": {
                    "type": "integer"
                },
                "oldPrice": {
                    "type": "integer"
                }
            }
        },
        "entity.Seller": {
            "type": "object",
            "properties": {
                "description": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "user_id": {
                    "type": "string"
                }
            }
        },
        "http.PaymentRequest": {
            "type": "object",
            "properties": {
                "item_id": {
                    "type": "string"
                }
            }
        },
        "utils.ErrResponse": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "integer"
                },
                "status": {
                    "type": "string"
                }
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "",
	Host:             "",
	BasePath:         "",
	Schemes:          []string{},
	Title:            "",
	Description:      "",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
